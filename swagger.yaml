openapi: 3.0.0
servers:
    - description: Local development
      url: https://localhost:5000
info:
    description: This is a REST API for interfacing with Iamus. This API provides endpoints for interacting with user information, submissions, and reviews.
    version: '1.0.0'
    title: Iamus API
    license:
        name: MIT
        url: https://spdx.org/licenses/MIT.html
tags:
    - name: external
      description: Methods that can be used by external services within the Super group to communicate with our API
    - name: auth
      description: Authentication related endpoints for external services.
    - name: users
      description: Endpoints relating to user information.
    - name: followers
      description: Endpoints relating to managing followers.
    - name: reviews
      description: Endpoints relating to submission reviews.
    - name: publications
      description: Endpoints relating to publications.
    - name: bookmarks
      description: Endpoints relating to bookmarks.
    - name: resources
      description: Endpoints related to managing uploaded resources.
paths:
    /sg/sso/login:
        post:
            summary: External login endpoint
            description: Endpoint for external services to authenticate with this service.
            tags:
                - external
            parameters:
                - in: query
                  required: true
                  name: from
                  schema:
                      type: string
                      description: Callback URL of where to respond
                - in: query
                  required: true
                  name: state
                  schema:
                      type: string
                      description: Session state
            requestBody:
                required: true
                description: Login endpoint for external services
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserLogin'
            responses:
                '200':
                    $ref: '#/components/responses/UserAuthResponse'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /sg/sso/verify:
        post:
            summary: Refresh user session
            description: Endpoint to refresh a JWT token
            tags:
                - external
            parameters:
                - in: query
                  required: true
                  name: token
                  schema:
                      type: string
                      description: JWT to check
            responses:
                '200':
                    $ref: '#/components/responses/TokenVerificationResponse'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '500':
                    $ref: '#/components/responses/InternalServerError'

    /sg/sso/callback:
        post:
            summary: Successful external login endpoint.
            description: This endpoint is used to notify the journal that the external login was successful and we should proceed with authenticating the external user. This might mean that there is an internal process of registering the user on the platform.
            tags:
                - external
            parameters:
                - in: query
                  required: true
                  name: from
                  schema:
                      type: string
                      description: Callback URL of where to respond
                - in: query
                  required: true
                  name: state
                  schema:
                      type: string
                      description: Session state
            responses:
                '204':
                    description: No Content
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /sg/resources/export/{id}:
        get:
            summary: Endpoint to download an archive representing the publication sources.
            tags:
                - external
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: The identifier of the publication.
            responses:
                '200':
                    $ref: '#/components/responses/PublicationExportResponse'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '500':
                    $ref: '#/components/responses/InternalServerError'

    /sg/resources/export/{id}/metadata:
        get:
            summary: Endpoint to download the publication metadata
            tags:
                - external
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: The identifier of the publication.
            responses:
                '200':
                    $ref: '#/components/responses/PublicationMetadataResponse'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /auth/email_validation:
        post:
            summary: Pre-registration email validation
            description: Check if an email is valid to use when registering
            tags:
                - external
            requestBody:
                required: true
                description: Provide a email to be checked
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/EmailValidation'
            responses:
                '204':
                    description: No Content
                '422':
                    $ref: '#/components/responses/UnprocessableEntity'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /auth/username_validation:
        post:
            summary: Pre-registration username validation
            description: Check if an email is valid to use when registering
            tags:
                - auth
            requestBody:
                required: true
                description: Provide a username to be checked
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UsernameValidation'
            responses:
                '204':
                    description: No Content
                '422':
                    $ref: '#/components/responses/UnprocessableEntity'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /auth/token:
        post:
            summary: Refresh user session
            description: Endpoint to refresh a JWT token
            tags:
                - auth
            requestBody:
                required: true
                description: Provide a valid refresh token to get a new token.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TokenRequest'
            responses:
                '200':
                    $ref: '#/components/responses/TokenResponse'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /auth/sso:
        post:
            summary: Begin the SSO process.
            description: Make a request to the server with the selected external service in order to login with their external identity provider.
            tags:
                - auth
            parameters:
                 - in: query
                   required: true
                   name: to
                   schema:
                      type: string
                      description: Callback URL of where to send user.
                      example: "http://localhost:8000"
                 - in: query
                   required: false
                   name: path
                   schema:
                      type: string
                      description: Resource path where to send the user back to.
                      example: /jdoe1/publication
            responses:
                '200':
                    description: Service redirects the client to the external journal provider login page.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - follow
                                properties:
                                    status:
                                        type: string
                                        enum: ['ok']
                                        example: 'ok'
                                    follow:
                                        type: string
                                        example: "http://localhost:8000"

                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /auth/login:
        post:
            summary: User Login
            description: User login endpoint, returning authentication tokens.
            tags:
                - auth
            requestBody:
                required: true
                description: Provide either a username or user email to login with, and a password. Providing both will result in the request trying to use both parameters.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserLogin'
            responses:
                '200':
                    $ref: '#/components/responses/UserAuthResponse'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /auth/register:
        post:
            summary: User registration
            description: User registration endpoint, returning authentication tokens.
            tags:
                - auth
            requestBody:
                required: true
                description: Provide user information to the endpoint that's used to create the server.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserRegistration'
            responses:
                '201':
                    $ref: '#/components/responses/UserAuthResponse'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /user/{username}:
        delete:
            summary: Account deletion
            description: User account deletion endpoint, delete a user by the id.
            tags:
                - users
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    description: User was successfully deleted.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: string
                                        example: "ok"
                                        enum: ["ok"]
                                    description:
                                        type: string
                                        example: 'User deleted'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '500':
                    $ref: '#/components/responses/InternalServerError'
        get:
            summary: Account information
            description: User account information endpoint, get user details by the id.
            tags:
                - users
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - user
                                    - follows
                                properties:
                                    status:
                                        type: string
                                        example: "ok"
                                        enum: ["ok"]
                                    user:
                                        $ref: '#/components/schemas/User'
                                    follows:
                                        $ref: '#/components/schemas/FollowerCount'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
        patch:
            summary: Update account information
            description: Update user information endpoint, update user details for a user specified by the user id.
            tags:
                - users
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            requestBody:
                required: true
                description: Provide patched user information to update user information fields. Any field can be omitted from the request
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserPatchRequest'
            responses:
                '200':
                    description: User information was updated successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - user
                                properties:
                                    status:
                                        type: string
                                        example: "ok"
                                        enum: ["ok"]
                                    user:
                                        $ref: '#/components/schemas/User'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /user/{username}/role:
        get:
            summary: Get user role
            description: Endpoint for getting user role by id.
            tags:
                - users
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - role
                                properties:
                                    status:
                                        type: string
                                        example: "ok"
                                        enum: ["ok"]
                                    role:
                                        type: string
                                        example: 'default'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
        patch:
            summary: Update user role
            description: Endpoint for updating user role by id.
            tags:
                - users
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    description: User role was updated successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - role
                                    - message
                                properties:
                                    status:
                                        type: string
                                        example: "ok"
                                        enum: ["ok"]
                                    message:
                                        type: string
                                        example: 'Successfully updated user role.'
                                    role:
                                        type: string
                                        example: 'default'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /user/{username}/follow:
        get:
            summary: Get the current user's follow status.
            description: Endpoint for checking if the current user is following another user specified by the given id.
            tags:
                - followers
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - following
                                properties:
                                    status:
                                        type: string
                                        example: "ok"
                                        enum: ["ok"]
                                    following:
                                        type: boolean
                                        example: true
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
        post:
            summary: Follow another user
            description: Endpoint for current user to follow another legit user.
            tags:
                - users
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    description: Successfully followed another user.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - message
                                properties:
                                    status:
                                        type: string
                                        example: "ok"
                                        enum: ["ok"]
                                    message:
                                        type: string
                                        example: 'Successfully added new follows.'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
        delete:
            summary: Unfollowing another user.
            description: Endpoint for current user to unfollow another legit user.
            tags:
                - users
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    description: Successfully unfollowed another user.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - message
                                properties:
                                    status:
                                        type: string
                                        example: "ok"
                                        enum: ["ok"]
                                    message:
                                        type: string
                                        example: 'User was unfollowed'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /user/{username}/followers:
        get:
            summary: Get a user's follower list.
            description: Endpoint for getting any user's follower list.
            tags:
                - followers
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - data
                                    - status
                                properties:
                                    status:
                                        type: string
                                        example: "ok"
                                        enum: ["ok"]
                                    data:
                                        $ref: '#/components/schemas/FollowerListData'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /user/{username}/following:
        get:
            summary: Get a user's following list.
            description: Endpoint for fetching a user's follows list
            tags:
                - followers
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - data
                                properties:
                                    status:
                                        type: string
                                        example: "ok"
                                        enum: ["ok"]
                                    data:
                                        $ref: '#/components/schemas/FollowingListData'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /publication:
        post:
            summary: Create a publication
            description: Create a new publication resource for a given user account.
            tags:
                - publications
            security:
                - BearerAuth: []
            requestBody:
                required: true
                description: Provide information about the upload
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreatePublicationRequest'
            responses:
                '201':
                    description: Returns information about the created publication.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreatePublicationResponse'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /publication/{username}/{name}:
        delete:
            summary: Delete a publication
            description: Create a new publication resource for a given user account.
            tags:
                - publications
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: path
                  name: name
                  schema:
                      type: string
                  required: true
                  description: The name of the publication for the current user.
            responses:
                '200':
                    $ref: '#/components/responses/DeletionResponse'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
        get:
            summary: Get a publication
            description: Get a publication resource for a given user account with the specified name. This will return the most recent publication revision.
            tags:
                - publications
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: path
                  name: name
                  schema:
                      type: string
                  required: true
                  description: The name of the publication for the current user.
            responses:
                '200':
                    description: Returns the requested publication.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - publication
                                properties:
                                    status:
                                        type: string
                                        example: "ok"
                                        enum: ["ok"]
                                    publication:
                                        $ref: '#/components/schemas/Publication'

                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /publication/{username}:
        get:
            summary: Get a user's publications
            description: Get a list of publications that the user owns.
            tags:
                - publications
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: query
                  required: false
                  name: pinned
                  schema:
                      type: string
                      example: 'false'
                      enum: ['true', 'false']
                      description: Filter by pinned used publications.
            responses:
                '200':
                    description: Returns the requested publications.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - data
                                properties:
                                    status:
                                        type: string
                                        example: "ok"
                                        enum: ["ok"]
                                    data:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Publication'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /publication/{username}/{name}/revisions:
        get:
            summary: Get a list of revisions for a publication
            description: Get a paginated list of publication revisions.
            tags:
                - publications
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: path
                  name: name
                  schema:
                      type: string
                  required: true
                  description: The name of the publication for the current user.
            responses:
                '200':
                    description: Returns the requested publications.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - data
                                properties:
                                    status:
                                        type: boolean
                                        example: true
                                    data:
                                        type: object
                                        required:
                                            - revisions
                                        properties:
                                            revisions:
                                                type: array
                                                items:
                                                    $ref: '#/components/schemas/Publication'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /publication/{username}/{name}/tree/{path}:
        get:
            summary: Get a file from a publication
            description: Get a publication resource file for a given user account with the specified name. This will return the most recent publication revision.
            tags:
                - publications
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: path
                  name: name
                  schema:
                      type: string
                  required: true
                  description: The name of the publication for the current user.
                - in: path
                  name: path
                  schema:
                      type: string
                      example: 'src/server.ts'
                  required: true
            responses:
                '200':
                    $ref: '#/components/responses/ResourceResponse'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /publication/{username}/{name}/{revision}:
        delete:
            summary: Delete a specific revision of a publication
            description: Create a new publication resource for a given user account.
            tags:
                - publications
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: path
                  name: name
                  schema:
                      type: string
                  required: true
                  description: The name of the publication for the current user.
                - in: path
                  name: revision
                  schema:
                      type: string
                  required: true
                  description: Get a specific revision of a given publication.
            responses:
                '200':
                    $ref: '#/components/responses/DeletionResponse'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
        get:
            summary: Get a specific revision of a publication
            description: Get a publication resource for a given user account with the specified name and the particular revision.
            tags:
                - publications
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: path
                  name: name
                  schema:
                      type: string
                  required: true
                  description: The name of the publication for the current user.
                - in: path
                  name: revision
                  schema:
                      type: string
                  required: true
                  description: Get a specific revision of a given publication.
            responses:
                '200':
                    description: Returns the requested publication.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - publication
                                properties:
                                    status:
                                        type: string
                                        example: "ok"
                                        enum: ["ok"]
                                    publication:
                                        $ref: '#/components/schemas/Publication'

                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /publication/{username}/{name}/{revision}/tree/{path}:
        get:
            summary: Get a file from a publication
            description: Get a publication resource file for a given user account with the specified name and the particular revision.
            tags:
                - publications
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: path
                  name: name
                  schema:
                      type: string
                  required: true
                  description: The name of the publication for the current user.
                - in: path
                  name: revision
                  schema:
                      type: string
                  required: true
                  description: Get a specific revision of a given publication.
                - in: path
                  name: path
                  schema:
                      type: string
                      example: 'src/server.ts'
                  required: true
            responses:
                '200':
                    $ref: '#/components/responses/ResourceResponse'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /publication/{username}/{name}/bookmark:
        delete:
            summary: Un-bookmark a publication
            security:
                - BearerAuth: []
            tags:
                - bookmarks
            parameters:
                - in: path
                  name: username
                  description: The username of the publisher
                  required: true
                  schema:
                      type: string
                - in: path
                  name: name
                  description: The name of the publication.
                  required: true
                  schema:
                      type: string
            responses:
                '204':
                    $ref: '#/components/responses/NoContent'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
        get:
            summary: Check is publication is bookmarked
            description: Get information if the bookmark a publication
            tags:
                - bookmarks
            parameters:
                - in: path
                  name: username
                  description: The username of the publisher
                  required: true
                  schema:
                      type: string
                - in: path
                  name: name
                  description: The name of the publication.
                  required: true
                  schema:
                      type: string
            security:
                - BearerAuth: []
            responses:
                '200':
                    description: Publication is bookmarked.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - bookmarked
                                properties:
                                    status:
                                        type: string
                                        enum: ['ok']
                                        example: 'ok'
                                    bookmarked:
                                        type: boolean
                                        example: true
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
        post:
            summary: Bookmark a certain publication
            security:
                - BearerAuth: []
            tags:
                - bookmarks
            parameters:
                - in: path
                  name: username
                  description: The username of the publisher
                  required: true
                  schema:
                      type: string
                - in: path
                  name: name
                  description: The name of the publication.
                  required: true
                  schema:
                      type: string
            responses:
                '204':
                    $ref: '#/components/responses/NoContent'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /publication/{username}/{name}/bookmarkers:
        get:
            summary: Check who has bookmarked the publication
            security:
                - BearerAuth: []
            tags:
                - bookmarks
            parameters:
                - in: path
                  name: username
                  description: The username of the publisher
                  required: true
                  schema:
                      type: string
                - in: path
                  name: name
                  description: The name of the publication.
                  required: true
                  schema:
                      type: string
            responses:
                '200':
                    description: List of users.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - bookmarks
                                properties:
                                    status:
                                        type: string
                                        enum: ['ok']
                                        example: 'ok'
                                    bookmarks:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/User'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /publication/{username}/bookmarks:
        get:
            summary: Check bookmarked publications by a user.
            security:
                - BearerAuth: []
            tags:
                - bookmarks
            parameters:
                - description: The username of bookmarks to check.
                  in: path
                  name: username
                  required: true
                  schema:
                      type: string
            responses:
                '200':
                    description: List of publications.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - bookmarks
                                properties:
                                    status:
                                        type: string
                                        enum: ['ok']
                                        example: 'ok'
                                    bookmarked:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Publication'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /resource/upload/{username}:
        post:
            summary: Upload an avatar image for a user.
            description: Endpoint for uploading media to Iamus for user profile pictures.
            tags:
                - resources
            security:
                - BearerAuth: []
            requestBody:
                required: true
                description: Provide information about the upload
                content:
                    multipart/form-data:
                        schema:
                            $ref: '#/components/schemas/UploadResource'
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '201':
                    description: Information about the uploaded resource, where it can be found.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UploadResourceResponse'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /resource/upload/publication/{id}:
        post:
            summary: Upload a generic file resource
            description: Endpoint for uploading media to Iamus from multiple sources including publications, comments, profile pictures, etc.
            tags:
                - resources
            security:
                - BearerAuth: []
            requestBody:
                required: true
                description: Provide information about the upload
                content:
                    multipart/form-data:
                        schema:
                            $ref: '#/components/schemas/UploadResource'
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: The identifier of the publication.
            responses:
                '201':
                    description: Information about the uploaded resource, where it can be found.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UploadResourceResponse'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /resource/upload/review/{id}:
        post:
            summary: Upload a generic file as an attachment to a comment
            description: Endpoint for uploading media to Iamus from multiple sources including publications, comments, profile pictures, etc.
            tags:
                - resources
            security:
                - BearerAuth: []
            requestBody:
                required: true
                description: Provide information about the upload
                content:
                    multipart/form-data:
                        schema:
                            $ref: '#/components/schemas/UploadResource'
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: The identifier of the publication.
            responses:
                '201':
                    description: Information about the uploaded resource, where it can be found.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UploadResourceResponse'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '500':
                    $ref: '#/components/responses/InternalServerError'

components:
    securitySchemes:
        BearerAuth:
            type: http
            scheme: bearer
    responses:
        NoContent:
            description: No Content. Server acknowledges request but has no return body.
        BadRequest:
            description: Bad Request. Provided request parameters were invalid.
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - status
                            - message
                        properties:
                            status:
                                type: string
                                example: 'error'
                                enum: ['error']
                            message:
                                type: string
                                example: 'Malformed request body'
                            extra:
                                type: object
        Unauthorized:
            description: Unauthorized. Requester doesn't have sufficient permissions to perform this action.
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - status
                            - message
                        properties:
                            status:
                                type: string
                                example: 'error'
                                enum: ['error']
                            message:
                                type: string
                                example: 'Unauthorized'
        UnprocessableEntity:
            description: Entity is unprocessable.
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - status
                            - message
                        properties:
                            status:
                                type: string
                                example: 'error'
                                enum: ['error']
                            message:
                                type: string
                                example: 'UnprocessableEntity'
        InternalServerError:
            description: Internal Server Error. Information retrieval failed, server unexpectedly returned an error.
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - status
                            - message
                        properties:
                            status:
                                type: string
                                example: 'error'
                                enum: ['error']
                            message:
                                type: string
                                example: 'Internal Server Error'
        NotFound:
            description: Specified resource does not exist in the scope of the requesters permissions.
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - status
                            - message
                        properties:
                            status:
                                type: string
                                example: 'error'
                                enum: ['error']
                            message:
                                type: string
                                example: 'Not Found'
        UserAuthResponse:
            description: Authentication tokens with user information.
            content:
                application/json:
                    schema:
                        type: object
                        description: Successful authentication, returning a token, and a refreshToken.
                        required:
                            - user
                            - token
                            - refreshToken
                        properties:
                            status:
                                type: string
                                example: 'ok'
                                enum: ['ok']
                            token:
                                type: string
                                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                            refreshToken:
                                type: string
                                example: ABCDE921312DAB23AE
                            user:
                                $ref: '#/components/schemas/User'
        DeletionResponse:
            description: When a specified resource has been deleted.
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - status
                            - message
                        properties:
                            status:
                                type: string
                                example: 'ok'
                                enum: ['ok']
                            message:
                                type: string
                                example: 'Resource has been successfully deleted.'
        ResourceResponse:
            description: Returned resource for a given publication.
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - status
                            - data
                        properties:
                            status:
                                type: string
                                example: 'ok'
                                enum: ['ok']
                            data:
                                oneOf:
                                    - $ref: '#/components/schemas/FileResponse'
                                    - $ref: '#/components/schemas/DirectoryResponse'
        TokenResponse:
            description: Response from fetching publication information.
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - status
                            - token
                            - refreshToken
                        properties:
                            status:
                                type: string
                                example: 'ok'
                                enum: ['ok']
                            token:
                                type: string
                                example: 'Token is valid'
                            refreshToken:
                                type: string
                                example: 'refresh-token'
        TokenVerificationResponse:
            description: Response from fetching publication information.
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - status
                            - message
                        properties:
                            status:
                                type: string
                                example: 'ok'
                                enum: ['ok']
                            message:
                                type: string
                                example: 'Token is valid'
                            user:
                                $ref: '#/components/schemas/User'

        PublicationExportResponse:
            description: Response archive file.
            content:
                application/zip:
                    schema:
                        type: string
                        format: binary
                        example: 56 50 26 50 80 57 4e 4a 12 04
        PublicationMetadataResponse:
            description: Response from fetching publication information.
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - status
                            - data
                        properties:
                            status:
                                type: string
                                example: 'ok'
                                enum: ['ok']
                            data:
                                type: object
                                required:
                                    - publication
                                    - reviews
                                properties:
                                    publication:
                                        $ref: '#/components/schemas/Publication'
                                    reviews:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Review'
    schemas:
        TokenRequest:
            type: object
            properties:
                token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                refreshToken:
                    type: string
                    example: ABCDE921312DAB23AE
        UsernameValidation:
            type: object
            required:
                - username
            properties:
                username:
                    type: string
                    example: 'jdoe1'
        EmailValidation:
            type: object
            required:
                - email
            properties:
                email:
                    type: string
                    example: 'jon.doe@email.com'
        UserRegistration:
            type: object
            required:
                - email
                - username
                - firstName
                - lastName
                - password
            properties:
                email:
                    type: string
                    example: 'jon.doe@email.com'
                firstName:
                    type: string
                    example: 'John'
                username:
                    type: string
                    example: 'jdoe1'
                lastName:
                    type: string
                    example: 'Doe'
                about:
                    type: string
                    example: 'Professor at Example University'
                password:
                    type: string
                    example: 'Password1!'
        UserPatchRequest:
            type: object
            properties:
                email:
                    type: string
                    example: 'jon.doe@email.com'
                firstName:
                    type: string
                    example: 'John'
                username:
                    type: string
                    example: 'jdoe1'
                lastName:
                    type: string
                    example: 'Doe'
                about:
                    type: string
                    example: 'Professor at Example University'
                status:
                    type: string
                    example: "I'm working"
                password:
                    type: string
                    example: 'Password1!'
        UserLogin:
            type: object
            description: The username can either be the actual username or the user's email.
            required:
                - password
                - username
            properties:
                username:
                    type: string
                    example: 'jdoe1'
                password:
                    type: string
                    example: 'Password1!'
        User:
            type: object
            required:
                - id
                - email
                - username
                - firstName
                - lastName
                - createdAt
            properties:
                id:
                    type: string
                    example: '507f1f77bcf86cd799439011'
                email:
                    type: string
                    example: 'jon.doe@email.com'
                username:
                    type: string
                    example: 'jdoe1'
                firstName:
                    type: string
                    example: 'John'
                lastName:
                    type: string
                    example: 'Doe'
                createdAt:
                    type: number
                    example: 2387238172812
                profilePictureUrl:
                    type: string
                    example: https://some-cdn.some-company.com/profiles/avatar.jpg
                status:
                    type: string
                    example: "I'm working!"
                about:
                    type: string
                    example: 'Professor at Example University'
        FollowerCount:
            type: object
            required:
                - following
                - followers
            properties:
                followers:
                    type: number
                    example: 0
                following:
                    type: number
                    example: 0
        FollowerListData:
            type: object
            required:
                - followers
            properties:
                followers:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
        FollowingListData:
            type: object
            required:
                - following
            properties:
                following:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
        UploadResource:
            type: object
            required:
                - file
            properties:
                file:
                    type: string
        UploadResourceResponse:
            type: object
            required:
                - status
            properties:
                status:
                    type: string
                    example: "ok"
                    enum: ["ok"]
        Publication:
            type: object
            required:
                - name
                - title
                - collaborators
                - createdAt
                - owner
                - draft
            properties:
                name:
                    type: string
                    example: 'Iamus'
                title:
                    type: string
                    example: 'Iamus: A platform for sharing astronomy code journals.'
                introduction:
                    type: string
                    example: 'Iamus is a platform for managing code journals...'
                revision:
                    type: string
                    example: 'v1.0.0'
                draft:
                    type: boolean
                    example: true
                owner:
                    $ref: '#/components/schemas/User'
                collaborators:
                    type: array
                    items:
                        type: string # TODO: maybe resolve collaborators later?
                        example: 'jdoe1'
        CreatePublicationRequest:
            type: object
            required:
                - name
                - title
                - collaborators
            properties:
                name:
                    type: string
                    example: 'Iamus'
                title:
                    type: string
                    example: 'Iamus: A platform for sharing astronomy code journals.'
                introduction:
                    type: string
                    example: 'Iamus is a platform for managing code journals...'
                revision:
                    type: string
                    example: 'v1.0.0'
                collaborators:
                    type: array
                    items:
                        type: string
                        example: jdoe1
        CreatePublicationResponse:
            type: object
            required:
                - status
                - publication
            properties:
                status:
                    type: string
                    example: "ok"
                    enum: ["ok"]
                publication:
                    $ref: '#/components/schemas/Publication'
        FileResponse:
            type: object
            required:
                - type
                - updatedAt
                - contents
            properties:
                type:
                    type: string
                    enum: ['file']
                    example: 'file'
                contents:
                    type: string
                    example: "Hello world!\n"
                updatedAt:
                    type: number
                    example: 1283723481237
        DirectoryResponse:
            type: object
            required:
                - type
                - entries
            properties:
                type:
                    type: string
                    enum: ['directory']
                    example: 'directory'
                entries:
                    type: array
                    items:
                        type: object
                        required:
                            - type
                            - updatedAt
                            - filename
                        properties:
                            type:
                                type: string
                                example: 'file'
                            filename:
                                type: string
                                example: 'server.ts'
                            updatedAt:
                                type: number
                                example: 1283723481237
        Review:
            type: object
            required:
                - owner
                - threads
                - createdAt
            properties:
                owner:
                    $ref: '#/components/schemas/User'
                createdAt:
                    type: number
                    example: 1636065460
                threads:
                    type: array
                    items:
                        type: array
                        items:
                            $ref: '#/components/schemas/Comment'
        Comment:
            type: object
            required:
                - filename
                - contents
                - thread
                - author
                - postedAt
            properties:
                filename:
                    type: string
                    example: 'src/server.ts'
                anchor:
                    type: object
                    required:
                        - start
                        - end
                    properties:
                        start:
                            type: number
                            example: 1
                        end:
                            type: number
                            example: 2
                contents:
                    type: string
                    example: 'This is a comment'
                thread:
                    type: number
                    example: 0
                author:
                    $ref: '#/components/schemas/User'
                postedAt:
                    type: number
                    example: 1636065460
