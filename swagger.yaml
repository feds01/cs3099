openapi: 3.0.0
servers:
    - description: Local development
      url: https://localhost:5000
info:
    description: This is a REST API for interfacing with Iamus. This API provides endpoints for interacting with user information, submissions, and reviews.
    version: '1.0.0'
    title: Iamus API
    license:
        name: MIT
        url: https://spdx.org/licenses/MIT.html
tags:
    - name: api
      description: Endpoints that are for querying information about the current API.
    - name: external
      description: Methods that can be used by external services within the Super group to communicate with our API
    - name: auth
      description: Authentication related endpoints for external services.
    - name: users
      description: Endpoints relating to user information.
    - name: followers
      description: Endpoints relating to managing followers.
    - name: reviews
      description: Endpoints relating to submission reviews.
    - name: comments
      description: Endpoints related to managing user comments.
    - name: publications
      description: Endpoints relating to publications.
    - name: resources
      description: Endpoints related to managing uploaded resources.
paths:
    /version:
        get:
            summary: Service version
            description: Get the current version of the service
            tags:
                - api
            responses:  
                '200':
                    description: The API Version
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - version
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    version:
                                        type: string
                                        example: "1.0.0"
    /openapi:
        get:
            summary: Service OpenAPI schema
            description: Get the current service OpenAPI schema
            tags:
                - api
            responses:  
                '200':
                    description: The API Schema
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - schema
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    schema:
                                        type: object
                
    /sg/sso/login:
        get:
            summary: External login endpoint
            description: Endpoint for external services to authenticate with this service.
            tags:
                - external
            parameters:
                - in: query
                  required: true
                  name: from
                  schema:
                      type: string
                      description: Callback URL of where to respond
                - in: query
                  required: true
                  name: state
                  schema:
                      type: string
                      description: Session state
            responses:
                '200':
                    $ref: '#/components/responses/UserAuthResponse'
                default:
                    $ref: '#/components/responses/ApiError'
    /sg/sso/verify:
        post:
            summary: Refresh user session
            description: Endpoint to refresh a JWT token
            tags:
                - external
            parameters:
                - in: query
                  required: true
                  name: token
                  schema:
                      type: string
                      description: JWT to check
            responses:
                '200':
                    $ref: '#/components/responses/TokenVerificationResponse'
                default:
                    $ref: '#/components/responses/ApiError'
    /sg/sso/callback:
        get:
            summary: Successful external login endpoint.
            description: This endpoint is used to notify the journal that the external login was successful and we should proceed with authenticating the external user. This might mean that there is an internal process of registering the user on the platform.
            tags:
                - external
            parameters:
                - in: query
                  required: true
                  name: from
                  schema:
                      type: string
                      description: Callback URL of where to respond
                - in: query
                  required: true
                  name: state
                  schema:
                      type: string
                      description: Session state
            responses:
                '204':
                    description: No Content
                default:
                    $ref: '#/components/responses/ApiError'
    /sg/resources/import:
        post:
            summary: Endpoint to download the publication metadata
            tags:
                - external
            security:
                - BearerAuth: []
            parameters:
                - in: query
                  required: true
                  name: from
                  schema:
                      type: string
                      description: Callback URL of where to respond
                      example: https://t01.example.com
                - in: query
                  required: true
                  name: token
                  schema:
                      type: string
                      description: JWT to check
                - in: query
                  required: true
                  name: id
                  schema:
                      type: string
                      description: ID of the submission to import.
            responses:
                '204':
                    $ref: '#/components/responses/NoContent'
                default:
                    $ref: '#/components/responses/ApiError'
    /sg/resources/export/{id}:
        get:
            summary: Endpoint to download an archive representing the publication sources.
            tags:
                - external
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: The identifier of the publication.
            responses:
                '200':
                    $ref: '#/components/responses/PublicationExportResponse'
                default:
                    $ref: '#/components/responses/ApiError'
    /sg/resources/export/{id}/metadata:
        get:
            summary: Endpoint to download the publication metadata
            tags:
                - external
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: The identifier of the publication.
            responses:
                '200':
                    $ref: '#/components/responses/PublicationMetadataResponse'
                default:
                    $ref: '#/components/responses/ApiError'
    /sg/users/{id}:
        get:
            summary: Endpoint to fetch user information about a particular user.
            tags:
                - external
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                      example: 'ABCDE921312DAB23AE:t06'
                  required: true
                  description: The identifier of the publication.
            responses:
                '200':
                    $ref: '#/components/responses/TokenVerificationResponse'
                default:
                    $ref: '#/components/responses/ApiError'
    /auth/email_validity:
        post:
            summary: Pre-registration email validation
            description: Check if an email is valid to use when registering
            tags:
                - auth
            requestBody:
                required: true
                description: Provide a email to be checked
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/EmailValidation'
            responses:
                '200':
                    description: Returns whether item is reserved or not
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - reserved
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    follow:
                                        type: boolean
                                        example: false
                default:
                    $ref: '#/components/responses/ApiError'
    /auth/username_validity:
        post:
            summary: Pre-registration username validation
            description: Check if an email is valid to use when registering
            tags:
                - auth
            requestBody:
                required: true
                description: Provide a username to be checked
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UsernameValidation'
            responses:
                '200':
                    description: Returns whether item is reserved or not
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - reserved
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    follow:
                                        type: boolean
                                        example: false

                default:
                    $ref: '#/components/responses/ApiError'
    /auth/session:
        post:
            summary: Refresh user session
            description: Endpoint to refresh a JWT token
            tags:
                - auth
            requestBody:
                required: true
                description: Provide a valid refresh token to get a new token.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TokenRequest'
            responses:
                '200':
                    $ref: '#/components/responses/UserAuthResponse'
                default:
                    $ref: '#/components/responses/ApiError'
    /auth/sso:
        post:
            summary: Begin the SSO process.
            description: Make a request to the server with the selected external service in order to login with their external identity provider.
            tags:
                - auth
            parameters:
                - in: query
                  required: true
                  name: to
                  schema:
                      type: string
                      description: Callback URL of where to send user.
                      example: 'http://localhost:8000'
                - in: query
                  required: false
                  name: path
                  schema:
                      type: string
                      description: Resource path where to send the user back to.
                      example: /jdoe1/publication
            responses:
                '200':
                    description: Service redirects the client to the external journal provider login page.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - follow
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    follow:
                                        type: string
                                        example: 'http://localhost:8000'

                default:
                    $ref: '#/components/responses/ApiError'
    /auth/login:
        post:
            summary: User Login
            description: User login endpoint, returning authentication tokens.
            tags:
                - auth
            requestBody:
                required: true
                description: Provide either a username or user email to login with, and a password. Providing both will result in the request trying to use both parameters.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserLogin'
            responses:
                '200':
                    $ref: '#/components/responses/UserAuthResponse'
                default:
                    $ref: '#/components/responses/ApiError'
    /auth/register:
        post:
            summary: User registration
            description: User registration endpoint, returning authentication tokens.
            tags:
                - auth
            requestBody:
                required: true
                description: Provide user information to the endpoint that's used to create the server.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserRegistration'
            responses:
                '201':
                    $ref: '#/components/responses/UserAuthResponse'
                default:
                    $ref: '#/components/responses/ApiError'
    /user/{username}:
        delete:
            summary: Account deletion
            description: User account deletion endpoint, delete a user by the id.
            tags:
                - users
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    $ref: '#/components/responses/ApiSuccess'
                default:
                    $ref: '#/components/responses/ApiError'
        get:
            summary: Account information
            description: User account information endpoint, get user details by the id.
            tags:
                - users
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - user
                                    - follows
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    user:
                                        $ref: '#/components/schemas/User'
                                    follows:
                                        $ref: '#/components/schemas/FollowerCount'
                default:
                    $ref: '#/components/responses/ApiError'
        patch:
            summary: Update account information
            description: Update user information endpoint, update user details for a user specified by the user id.
            tags:
                - users
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            requestBody:
                required: true
                description: Provide patched user information to update user information fields. Any field can be omitted from the request
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserPatchRequest'
            responses:
                '200':
                    description: User information was updated successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - user
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    user:
                                        $ref: '#/components/schemas/User'
                default:
                    $ref: '#/components/responses/ApiError'
    /user/{username}/avatar:
        delete:
            summary: Account avatar deletion
            description: Remove an avatar that's on a user account.
            tags:
                - users
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    $ref: '#/components/responses/ApiSuccess'
                default:
                    $ref: '#/components/responses/ApiError'
        get:
            summary: Get user avatar
            description: Get an avatar that's on a user account.
            tags:
                - users
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    description: OK
                    content:
                        application/octet-stream:
                            schema:
                                type: string
                                format: binary
                                example: 56 50 26 50 80 57 4e 4a 12 04
                default:
                    $ref: '#/components/responses/ApiError'
    /user/{username}/reviews:
        get:
            summary: Get a user's reviews.
            description: Return a paginated list of the user's reviews.
            tags:
                - users
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    description: User owned reviews.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - reviews
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    reviews:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Review'
                default:
                    $ref: '#/components/responses/ApiError'
    /user/{username}/role:
        get:
            summary: Get user role
            description: Endpoint for getting user role by id.
            tags:
                - users
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - role
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    role:
                                        type: string
                                        example: 'default'
                default:
                    $ref: '#/components/responses/ApiError'
        patch:
            summary: Update user role
            description: Endpoint for updating user role by id.
            tags:
                - users
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    description: User role was updated successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - role
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    role:
                                        type: string
                                        example: 'default'
                default:
                    $ref: '#/components/responses/ApiError'
    /user/{username}/follow:
        get:
            summary: Get the current user's follow status.
            description: Endpoint for checking if the current user is following another user specified by the given id.
            tags:
                - followers
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - following
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    following:
                                        type: boolean
                                        example: true
                default:
                    $ref: '#/components/responses/ApiError'
        post:
            summary: Follow another user
            description: Endpoint for current user to follow another legit user.
            tags:
                - users
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    description: Successfully followed another user.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                default:
                    $ref: '#/components/responses/ApiError'
        delete:
            summary: Unfollowing another user.
            description: Endpoint for current user to unfollow another legit user.
            tags:
                - users
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    $ref: '#/components/responses/ApiSuccess'
                default:
                    $ref: '#/components/responses/ApiError'
    /user/{username}/followers:
        get:
            summary: Get a user's follower list.
            description: Endpoint for getting any user's follower list.
            tags:
                - followers
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    $ref: '#/components/responses/FollowerList'
                default:
                    $ref: '#/components/responses/ApiError'
    /user/{username}/following:
        get:
            summary: Get a user's following list.
            description: Endpoint for fetching a user's follows list
            tags:
                - followers
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    $ref: '#/components/responses/FollowerList'
                default:
                    $ref: '#/components/responses/ApiError'
    /publication:
        post:
            summary: Create a publication
            description: Create a new publication resource for a given user account.
            tags:
                - publications
            security:
                - BearerAuth: []
            requestBody:
                required: true
                description: Provide information about the upload
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreatePublicationRequest'
            responses:
                '201':
                    $ref: '#/components/responses/CreatePublicationResponse'
                default:
                    $ref: '#/components/responses/ApiError'
    /publication/{username}/{name}:
        delete:
            summary: Delete a publication
            description: Delete the publication resource.
            tags:
                - publications
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: path
                  name: name
                  schema:
                      type: string
                  required: true
                  description: The name of the publication for the current user.
                - in: query
                  required: false
                  name: revision
                  schema:
                      type: string
                      description: Revision number of the publication.
                - in: query
                  name: draft
                  schema:
                      type: boolean
                  required: false
                  description: Whether or not the publication that is to be deleted is a draft version.
            responses:
                '200':
                    $ref: '#/components/responses/ApiSuccess'
                default:
                    $ref: '#/components/responses/ApiError'
        patch:
            summary: Patch an existing publication
            description: Patch the publication resource.
            tags:
                - publications
            security:
                - BearerAuth: []
            requestBody:
                required: true
                description: Provide information about the upload
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PatchPublicationRequest'
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: path
                  name: name
                  schema:
                      type: string
                  required: true
                  description: The name of the publication for the current user.
                - in: query
                  required: false
                  name: revision
                  schema:
                      type: string
                      description: Revision number of the publication.
            responses:
                '200':
                    $ref: '#/components/responses/CreatePublicationResponse'
                default:
                    $ref: '#/components/responses/ApiError'
        get:
            summary: Get a publication
            description: Get a publication resource for a given user account with the specified name. This will return the most recent publication revision.
            tags:
                - publications
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: path
                  name: name
                  schema:
                      type: string
                  required: true
                  description: The name of the publication for the current user.
                - in: query
                  required: false
                  name: revision
                  schema:
                      type: string
                      description: Revision number of the publication.
            responses:
                '200':
                    description: Returns the requested publication.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - publication
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    publication:
                                        $ref: '#/components/schemas/Publication'
                default:
                    $ref: '#/components/responses/ApiError'
    /publication/{username}:
        get:
            summary: Get a user's publications
            description: Get a list of publications that the user owns.
            tags:
                - publications
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: query
                  required: false
                  name: pinned
                  schema:
                      type: string
                      example: 'false'
                      enum: ['true', 'false']
                      description: Filter by pinned used publications.
            responses:
                '200':
                    description: Returns the requested publications.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - publications
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    publications:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Publication'
                default:
                    $ref: '#/components/responses/ApiError'            
    /publication/{username}/{name}/export:
        post:
            summary: Export a publication
            description: Begin a transactional request to export a publication.
            tags:
                - publications
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: path
                  name: name
                  schema:
                      type: string
                  required: true
                  description: The name of the publication for the current user.
                - in: query
                  required: true
                  name: to
                  schema:
                      type: string
                      description: URL of the service to export the publication to.
                - in: query
                  required: true
                  name: exportReviews
                  schema:
                      type: boolean
                      description: Whether to export reviews or not to export reviews.
                - in: query
                  required: false
                  name: revision
                  schema:
                      type: string
                      description: Revision number of the publication.
            responses:
                '200':
                    $ref: '#/components/responses/ApiSuccess'
                default:
                    $ref: '#/components/responses/ApiError'
    /publication/{username}/{name}/revise:
        post:
            summary: Revise a publication
            description: Revise the current version of a publication
            tags:
                - publications
            security:
                - BearerAuth: []
            requestBody:
                required: true
                description: Provide the new revision tag to use when revising a publication.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RevisePublicationRequest'
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: path
                  name: name
                  schema:
                      type: string
                  required: true
                  description: The name of the publication for the current user.
            responses:
                '200':
                    $ref: '#/components/responses/CreatePublicationResponse'
                default:
                    $ref: '#/components/responses/ApiError'
    /publication/{username}/{name}/revisions:
        get:
            summary: Get a list of revisions for a publication
            description: Get a paginated list of publication revisions.
            tags:
                - publications
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: path
                  name: name
                  schema:
                      type: string
                  required: true
                  description: The name of the publication for the current user.
            responses:
                '200':
                    description: Returns the requested publications.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - revisions
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    revisions:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Publication'
                default:
                    $ref: '#/components/responses/ApiError'
    /publication/{username}/{name}/tree/{path}:
        get:
            summary: Get a file from a publication
            description: Get a publication resource file for a given user account with the specified name. This will return the most recent publication revision.
            tags:
                - publications
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: path
                  name: name
                  schema:
                      type: string
                  required: true
                  description: The name of the publication for the current user.
                - in: path
                  name: path
                  schema:
                      type: string
                      example: 'src/server.ts'
                  required: true
                - in: query
                  required: false
                  name: revision
                  schema:
                      type: string
                      description: Revision number of the publication.
            responses:
                '200':
                    $ref: '#/components/responses/ResourceResponse'
                default:
                    $ref: '#/components/responses/ApiError'
    /publication/{username}/{name}/all:
        get:
            summary: Get a paginated list of sources for a publication
            tags:
                - publications
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: path
                  name: name
                  schema:
                      type: string
                  required: true
                  description: The name of the publication for the current user.
                - in: query
                  name: revision
                  schema:
                      type: string
                  required: true
                  description: Get a specific revision of a given publication.
            responses:
                '200':
                    description: Returns the requested publications.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - entries
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    entries:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/FileResponse'
                default:
                    $ref: '#/components/responses/ApiError'
    /publication/{username}/{name}/{revision}/review:
        post:
            summary: Create a review on a publication.
            description: Begin a review process on a publication.
            tags:
                - reviews
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: path
                  name: revision
                  schema:
                      type: string
                  required: true
                  description: The revision of the publication.
                - in: path
                  name: name
                  schema:
                      type: string
                  required: true
                  description: The name of the publication for the current user.
            responses:
                '200':
                    description: Created a new review.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - review
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    review:
                                        $ref: '#/components/schemas/Review'
                default:
                    $ref: '#/components/responses/ApiError'
    /publication/{username}/{name}/{revision}/reviews:
        get:
            summary: Get a list of reviews on a publication
            description: Get a paginated list of publication reviews.
            tags:
                - reviews
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
                - in: path
                  name: name
                  schema:
                      type: string
                  required: true
                  description: The name of the publication for the current user.
                - in: path
                  name: revision
                  schema:
                      type: string
                  required: true
                  description: The revision of the publication.
            responses:
                '200':
                    description: Returns the requested publications.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - reviews
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    reviews:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Review'
                default:
                    $ref: '#/components/responses/ApiError'
    /resource/upload/{username}:
        post:
            summary: Upload an avatar image for a user.
            description: Endpoint for uploading media to Iamus for user profile pictures.
            tags:
                - resources
            security:
                - BearerAuth: []
            requestBody:
                required: true
                description: Provide information about the upload
                content:
                    multipart/form-data:
                        schema:
                            $ref: '#/components/schemas/UploadResource'
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username.
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - user
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    user:
                                        $ref: '#/components/schemas/User'
                default:
                    $ref: '#/components/responses/ApiError'
    /resource/upload/publication/{id}:
        post:
            summary: Upload a generic file resource
            description: Endpoint for uploading media to Iamus from multiple sources including publications, comments, profile pictures, etc.
            tags:
                - resources
            security:
                - BearerAuth: []
            requestBody:
                required: true
                description: Provide information about the upload
                content:
                    multipart/form-data:
                        schema:
                            $ref: '#/components/schemas/UploadResource'
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: The identifier of the publication.
            responses:
                '201':
                    $ref: '#/components/responses/ApiSuccess'
                default:
                    $ref: '#/components/responses/ApiError'
    /resource/upload/review/{id}:
        post:
            summary: Upload a generic file as an attachment to a comment
            description: Endpoint for uploading media to Iamus from multiple sources including publications, comments, profile pictures, etc.
            tags:
                - resources
            security:
                - BearerAuth: []
            requestBody:
                required: true
                description: Provide information about the upload
                content:
                    multipart/form-data:
                        schema:
                            $ref: '#/components/schemas/UploadResource'
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: The identifier of the publication.
            responses:
                '201':
                    $ref: '#/components/responses/ApiSuccess'
                default:
                    $ref: '#/components/responses/ApiError'
    /thread/{id}:
        get:
            description: Get comments for a particular thread.
            tags:
                - comments
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: ID of thread.
            responses:
                '200':
                    description: Comment thread.
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - comments
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    comments:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Comment'

                default:
                    $ref: '#/components/responses/ApiError'
        delete:
            description: Get a paginated list of publication revisions.
            tags:
                - comments
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: ID of thread.
            responses:
                '204':
                    $ref: '#/components/responses/NoContent'
                default:
                    $ref: '#/components/responses/ApiError'
    /review/{id}/comment:
        put:
            summary: Add a comment to a review.
            description: Comment on a review, specified by the review id.
            tags:
                - reviews
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: review id.
            requestBody:
                $ref: '#/components/requestBodies/CreateCommentRequest'
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - comment
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    comment:
                                        $ref: '#/components/schemas/Comment'
                default:
                    $ref: '#/components/responses/ApiError'

    /comment/{id}:
        get:
            summary: Get a comment
            description: get comment by user id.
            tags:
                - comments
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: comment id.
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    comment:
                                        $ref: '#/components/schemas/Comment'
                default:
                    $ref: '#/components/responses/ApiError'
        patch:
            summary: Update a comment
            description: update the contents of a comment by id.
            tags:
                - comments
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: comment id.
            requestBody:
                required: true
                description: Provide the new contents of the comment as a string.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PatchComment'
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - comment
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    comment:
                                        $ref: '#/components/schemas/Comment'
                default:
                    $ref: '#/components/responses/ApiError'
        delete:
            summary: Delete a comment
            description: delete comment by user id.
            tags:
                - comments
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: comment id.
            responses:
                '204':
                    $ref: '#/components/responses/NoContent'
                default:
                    $ref: '#/components/responses/ApiError'
    /review/{id}:
        get:
            summary: Get a review.
            description: get review by user id.
            tags:
                - reviews
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: review id.
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - review
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    review:
                                        $ref: '#/components/schemas/Review'
                default:
                    $ref: '#/components/responses/ApiError'
        delete:
            summary: Delete a review
            description: delete review by user id.
            tags:
                - reviews
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: review id.
            responses:
                '204':
                    $ref: '#/components/responses/NoContent'
                default:
                    $ref: '#/components/responses/ApiError'
    /review/{id}/comments:
        get:
            summary: Get comments on a review.
            description: get a paginated list of comments on a review.
            tags:
                - reviews
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: review id.
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - status
                                    - comments
                                properties:
                                    status:
                                        $ref: '#/components/schemas/SuccessStatus'
                                    comments:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Comment'
                default:
                    $ref: '#/components/responses/ApiError'
    /review/{id}/complete:
        post:
            summary: Finalise a review.
            description: Publish the drafted review.
            tags:
                - reviews
            security:
                - BearerAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: string
                  required: true
                  description: review id.
            responses:
                '200':
                    $ref: '#/components/responses/NoContent'
                default:
                    $ref: '#/components/responses/ApiError'

components:
    securitySchemes:
        BearerAuth:
            type: http
            scheme: bearer
    requestBodies:
        CreateCommentRequest:
            required: true
            description: Provide patched user information to update user information fields. Any field can be omitted from the request
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - contents
                        properties:
                            replying:
                                type: string
                                example: 'Doe'
                            contents:
                                type: string
                                example: "I'm a comment"
                            filename:
                                type: string
                                example: 'src/server.ts'
                            anchor:
                                $ref: '#/components/schemas/CommentAnchor'

    responses:
        NoContent:
            description: No Content. Server acknowledges request but has no return body.
        ApiSuccess:
            description: General success response from the API.
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - status
                        properties:
                            status:
                                $ref: '#/components/schemas/SuccessStatus'
        ApiError:
            description: General Error response from the API.
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - status
                            - message
                        properties:
                            status:
                                type: string
                                example: 'error'
                                enum: ['error']
                            message:
                                type: string
                                example: 'Message describing the error.'
                            errors:
                                type: object
                                additionalProperties:
                                    $ref: '#/components/schemas/ResponseError'
        FollowerList:
            description: OK
            content:
                application/json:
                    schema:
                        allOf:
                            - $ref: '#/components/schemas/SuccessStatusObject'
                            - $ref: '#/components/schemas/FollowerListData'
        UserAuthResponse:
            description: Authentication tokens with user information.
            content:
                application/json:
                    schema:
                        type: object
                        description: Successful authentication, returning a token, and a refreshToken.
                        required:
                            - user
                            - token
                            - refreshToken
                        properties:
                            status:
                                $ref: '#/components/schemas/SuccessStatus'
                            token:
                                type: string
                                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                            refreshToken:
                                type: string
                                example: ABCDE921312DAB23AE
                            user:
                                $ref: '#/components/schemas/User'
        ResourceResponse:
            description: Returned resource for a given publication.
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - status
                            - entry
                        properties:
                            status:
                                $ref: '#/components/schemas/SuccessStatus'
                            entry:
                                oneOf:
                                    - $ref: '#/components/schemas/FileResponse'
                                    - $ref: '#/components/schemas/DirectoryResponse'
        TokenResponse:
            description: Response from fetching publication information.
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - status
                            - token
                            - refreshToken
                        properties:
                            status:
                                $ref: '#/components/schemas/SuccessStatus'
                            token:
                                type: string
                                example: 'Token is valid'
                            refreshToken:
                                type: string
                                example: 'refresh-token'
        TokenVerificationResponse:
            description: Response from fetching publication information.
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - status
                            - user_id
                            - name
                            - email
                        properties:
                            status:
                                $ref: '#/components/schemas/SuccessStatus'
                            user_id:
                                type: string
                                example: 'ABCDE921312DAB23AE:t06'
                            name:
                                type: string
                                example: 'John Doe'
                            email:
                                type: string
                                example: 'jdoe1@example.com'
                            profilePictureUrl:
                                type: string
                                example: https://some-cdn.some-company.com/profiles/avatar.jpg
        PublicationExportResponse:
            description: Response archive file.
            content:
                application/octet-stream:
                    schema:
                        type: string
                        format: binary
                        example: 56 50 26 50 80 57 4e 4a 12 04
        PublicationMetadataResponse:
            description: Response from fetching publication information.
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - status
                            - publication
                            - reviews
                        properties:
                            status:
                                $ref: '#/components/schemas/SuccessStatus'
                            publication:
                                $ref: '#/components/schemas/SgPublication'
                            reviews:
                                type: array
                                items:
                                    $ref: '#/components/schemas/SgReview'
        CreatePublicationResponse:
            description: Response creating/modifying a publication.
            content:
                application/json:
                    schema:
                        type: object
                        required:
                            - status
                            - publication
                        properties:
                            status:
                                $ref: '#/components/schemas/SuccessStatus'
                            publication:
                                $ref: '#/components/schemas/Publication'
    schemas:
        SuccessStatus:
            type: string
            example: 'ok'
            enum: ['ok']
        SuccessStatusObject:
            type: object
            required:
                - status
            properties:
                status:
                    $ref: '#/components/schemas/SuccessStatus'
        ResponseError:
            type: object
            required:
                - message
            properties:
                message:
                    type: string
                    example: 'This field is invalid'
        TokenRequest:
            type: object
            properties:
                token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                refreshToken:
                    type: string
                    example: ABCDE921312DAB23AE
        UsernameValidation:
            type: object
            required:
                - username
            properties:
                username:
                    type: string
                    example: 'jdoe1'
        EmailValidation:
            type: object
            required:
                - email
            properties:
                email:
                    type: string
                    example: 'jon.doe@email.com'
        UserRegistration:
            type: object
            required:
                - email
                - username
                - password
            properties:
                email:
                    type: string
                    example: 'jon.doe@email.com'
                username:
                    type: string
                    example: 'jdoe1'
                name:
                    type: string
                    example: 'John Doe'
                about:
                    type: string
                    example: 'Professor at Example University'
                password:
                    type: string
                    example: 'Password1!'
        UserPatchRequest:
            type: object
            properties:
                email:
                    type: string
                    example: 'jon.doe@email.com'
                name:
                    type: string
                    example: 'John Doe'
                username:
                    type: string
                    example: 'jdoe1'
                about:
                    type: string
                    example: 'Professor at Example University'
                status:
                    type: string
                    example: "I'm working"
                password:
                    type: string
                    example: 'Password1!'
        UserLogin:
            type: object
            description: The username can either be the actual username or the user's email.
            required:
                - password
                - username
            properties:
                username:
                    type: string
                    example: 'jdoe1'
                password:
                    type: string
                    example: 'Password1!'
        User:
            type: object
            required:
                - id
                - email
                - username
                - role
                - createdAt
            properties:
                id:
                    type: string
                    example: '507f1f77bcf86cd799439011'
                email:
                    type: string
                    example: 'jon.doe@email.com'
                username:
                    type: string
                    example: 'jdoe1'
                role:
                    type: string
                    example: 'default'
                    enum: ['default', 'moderator', 'administrator']
                name:
                    type: string
                    example: 'John Doe'
                createdAt:
                    type: number
                    example: 2387238172812
                profilePictureUrl:
                    type: string
                    example: https://some-cdn.some-company.com/profiles/avatar.jpg
                status:
                    type: string
                    example: "I'm working!"
                about:
                    type: string
                    example: 'Professor at Example University'
        FollowerCount:
            type: object
            required:
                - following
                - followers
            properties:
                followers:
                    type: number
                    example: 0
                following:
                    type: number
                    example: 0
        FollowerListData:
            type: object
            required:
                - followers
            properties:
                followers:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
        FollowingListData:
            type: object
            required:
                - following
            properties:
                following:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
        UploadResource:
            type: object
            required:
                - file
            properties:
                file:
                    type: string
                    format: binary
        Publication:
            type: object
            required:
                - id
                - name
                - title
                - collaborators
                - owner
                - draft
                - current
                - createdAt
                - updatedAt
                - pinned
                - revision
            properties:
                id:
                    type: string
                    example: 'ABCDE921312DAB23AE'
                name:
                    type: string
                    example: 'Iamus'
                title:
                    type: string
                    example: 'Iamus: A platform for sharing astronomy code journals.'
                introduction:
                    type: string
                    example: 'Iamus is a platform for managing code journals...'
                revision:
                    type: string
                    example: 'v1.0.0'
                pinned:
                    type: boolean
                    example: false
                draft:
                    type: boolean
                    example: true
                current:
                    type: boolean
                    example: true
                owner:
                    $ref: '#/components/schemas/User'
                attachment:
                    type: boolean
                    example: true
                collaborators:
                    type: array
                    items:
                        type: string
                        example: 'jdoe1'
                createdAt:
                    type: number
                    example: 1636065460
                updatedAt:
                    type: number
                    example: 1636065460
        PatchPublicationRequest:
            type: object
            properties:
                name:
                    type: string
                    example: 'Iamus'
                title:
                    type: string
                    example: 'Iamus: A platform for sharing astronomy code journals.'
                introduction:
                    type: string
                    example: 'Iamus is a platform for managing code journals...'
                revision:
                    type: string
                    example: 'v1.0.0'
                collaborators:
                    type: array
                    items:
                        type: string
                        example: jdoe1

        RevisePublicationRequest:
            type: object
            required:
                - revision
            properties:
                revision:
                    type: string
                    example: 'v1.0.0'
        CreatePublicationRequest:
            type: object
            required:
                - name
                - title
                - collaborators
            properties:
                name:
                    type: string
                    example: 'Iamus'
                title:
                    type: string
                    example: 'Iamus: A platform for sharing astronomy code journals.'
                introduction:
                    type: string
                    example: 'Iamus is a platform for managing code journals...'
                revision:
                    type: string
                    example: 'v1.0.0'
                collaborators:
                    type: array
                    items:
                        type: string
                        example: jdoe1
        FileResponse:
            type: object
            required:
                - type
                - updatedAt
                - contents
                - filename
            properties:
                type:
                    type: string
                    enum: ['file']
                    example: 'file'
                filename:
                    type: string
                    example: 'src/server.ts'
                contents:
                    type: string
                    example: "Hello world!\n"
                updatedAt:
                    type: number
                    example: 1283723481237
        DirectoryResponse:
            type: object
            required:
                - type
                - entries
            properties:
                type:
                    type: string
                    enum: ['directory']
                    example: 'directory'
                entries:
                    type: array
                    items:
                        type: object
                        required:
                            - type
                            - updatedAt
                            - filename
                        properties:
                            type:
                                type: string
                                example: 'file'
                                enum: ['file', 'directory']
                            filename:
                                type: string
                                example: 'server.ts'
                            updatedAt:
                                type: number
                                example: 1283723481237
        PatchComment:
            type: object
            required:
                - contents
            properties:
                contents:
                    type: string
                    example: 'This is a comment'
        Review:
            type: object
            required:
                - id
                - owner
                - status
                - publication
                - createdAt
                - updatedAt
            properties:
                publication:
                    $ref: '#/components/schemas/Publication'
                owner:
                    $ref: '#/components/schemas/User'
                createdAt:
                    type: number
                    example: 1636065460
                updatedAt:
                    type: number
                    example: 1636065460
                status:
                    type: string
                    example: 'started'
                    enum: ['started', 'completed']
                id:
                    type: string
                    example: ABCDE921312DAB23AE
        Comment:
            type: object
            required:
                - id
                - edited
                - contents
                - thread
                - author
                - review
                - createdAt
                - updatedAt
            properties:
                id:
                    type: string
                    example: 'id'
                edited:
                    type: boolean
                    example: false
                filename:
                    type: string
                    example: 'src/server.ts'
                anchor:
                    $ref: '#/components/schemas/CommentAnchor'
                contents:
                    type: string
                    example: 'This is a comment'
                thread:
                    type: string
                    example: ABCDE921312DAB23AE
                review:
                    type: string
                    example: ABCDE921312DAB23AE
                replying:
                    type: string
                    example: ABCDE921312DAB23AE
                author:
                    $ref: '#/components/schemas/User'
                createdAt:
                    type: number
                    example: 1636065460
                updatedAt:
                    type: number
                    example: 1636065460
        CommentAnchor:
            type: object
            required:
                - start
                - end
            properties:
                start:
                    type: number
                    example: 1
                end:
                    type: number
                    example: 2
        SgUser:
            type: string
            example: 'ABCDE921312DAB23AE:t06'
        SgPublication:
            type: object
            required:
                - name
                - title
                - owner
                - introduction
                - collaborators
                - createdAt
            properties:
                name:
                    type: string
                    example: 'some-url-safe-name'
                title:
                    type: string
                    example: 'Journal: A code journals.'
                owner:
                    $ref: '#/components/schemas/SgUser'
                introduction:
                    type: string
                    example: 'This is a platform for managing code journals...'
                revision:
                    type: string
                    example: 'v1.0.0'
                collaborators:
                    type: array
                    items:
                        $ref: '#/components/schemas/SgUser'
        SgReview:
            type: object
            required:
                - owner
                - comments
                - createdAt
            properties:
                owner:
                    $ref: '#/components/schemas/SgUser'
                createdAt:
                    type: number
                    example: 1636065460
                comments:
                    type: array
                    items:
                        $ref: '#/components/schemas/SgComment'
        SgComment:
            type: object
            required:
                - id
                - contents
                - thread
                - author
                - postedAt
            properties:
                id:
                    type: number
                    example: 1
                replying:
                    type: number
                    example: 0
                filename:
                    type: string
                    example: 'src/server.ts'
                anchor:
                    $ref: '#/components/schemas/CommentAnchor'
                contents:
                    type: string
                    example: 'This is a comment'
                author:
                    type: string
                    example: 'ABCDE921312DAB23AE:t06'
                thread:
                    type: number
                    example: 0
                postedAt:
                    type: number
                    example: 1636065460
