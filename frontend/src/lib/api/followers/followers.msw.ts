/**
 * Generated by orval v6.6.4 🍺
 * Do not edit manually.
 * Iamus API
 * This is a REST API for interfacing with Iamus. This API provides endpoints for interacting with user information, submissions, and reviews.
 * OpenAPI spec version: 1.0.0
 */
import { SuccessStatus, UserRole } from '.././models';
import faker from 'faker';
import { rest } from 'msw';

export const getGetUserUsernameFollowMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    following: faker.datatype.boolean(),
});

export const getGetUserUsernameFollowersMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    followers: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
        id: faker.random.word(),
        email: faker.random.word(),
        username: faker.random.word(),
        role: faker.helpers.randomize(Object.values(UserRole)),
        name: faker.helpers.randomize([faker.random.word(), undefined]),
        createdAt: faker.datatype.number(),
        profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
        status: faker.helpers.randomize([faker.random.word(), undefined]),
        about: faker.helpers.randomize([faker.random.word(), undefined]),
    })),
});

export const getGetUserUsernameFollowingMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    followers: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
        id: faker.random.word(),
        email: faker.random.word(),
        username: faker.random.word(),
        role: faker.helpers.randomize(Object.values(UserRole)),
        name: faker.helpers.randomize([faker.random.word(), undefined]),
        createdAt: faker.datatype.number(),
        profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
        status: faker.helpers.randomize([faker.random.word(), undefined]),
        about: faker.helpers.randomize([faker.random.word(), undefined]),
    })),
});

export const getFollowersMSW = () => [
    rest.get('*/user/:username/follow', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetUserUsernameFollowMock()));
    }),
    rest.get('*/user/:username/followers', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetUserUsernameFollowersMock()));
    }),
    rest.get('*/user/:username/following', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetUserUsernameFollowingMock()));
    }),
];
