/**
 * Generated by orval v6.2.3 🍺
 * Do not edit manually.
 * Iamus API
 * This is a REST API for interfacing with Iamus. This API provides endpoints for interacting with user information, submissions, and reviews.
 * OpenAPI spec version: 1.0.0
 */
import {
  rest
} from 'msw'
import faker from 'faker'

export const getPostAuthLoginMock = () => ({refreshToken: faker.random.word(), status: faker.helpers.randomize([faker.datatype.boolean(), undefined]), token: faker.random.word(), user: {about: faker.helpers.randomize([faker.random.word(), undefined]), email: faker.random.word(), firstName: faker.random.word(), id: faker.random.word(), lastName: faker.random.word(), profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]), status: faker.helpers.randomize([faker.random.word(), undefined]), username: faker.random.word()}})

export const getPostAuthRegisterMock = () => ({refreshToken: faker.random.word(), status: faker.helpers.randomize([faker.datatype.boolean(), undefined]), token: faker.random.word(), user: {about: faker.helpers.randomize([faker.random.word(), undefined]), email: faker.random.word(), firstName: faker.random.word(), id: faker.random.word(), lastName: faker.random.word(), profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]), status: faker.helpers.randomize([faker.random.word(), undefined]), username: faker.random.word()}})

export const getPostAuthTokenMock = () => ({refreshToken: faker.random.word(), status: faker.datatype.boolean(), token: faker.random.word()})

export const getAuthMSW = () => [
rest.post('*/auth/email_validation', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.post('*/auth/login', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostAuthLoginMock()),
        )
      }),rest.post('*/auth/register', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostAuthRegisterMock()),
        )
      }),rest.post('*/auth/token', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostAuthTokenMock()),
        )
      }),rest.post('*/auth/username_validation', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),]
