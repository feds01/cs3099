/**
 * Generated by orval v6.2.3 üç∫
 * Do not edit manually.
 * Iamus API
 * This is a REST API for interfacing with Iamus. This API provides endpoints for interacting with user information, submissions, and reviews.
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, UseMutationOptions, MutationFunction } from 'react-query';
import type {
    UploadResourceResponse,
    BadRequestResponse,
    UnauthorizedResponse,
    InternalServerErrorResponse,
    UploadResource,
} from '.././models';
import { customInstance } from '.././mutator/custom-instance';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;

/**
 * Endpoint for uploading media to Iamus from multiple sources including publications, comments, profile pictures, etc.
 * @summary Upload a generic file resource
 */
export const postResourcesUploadUsernameType = (username: string, type: string, uploadResource: UploadResource) => {
    const formData = new FormData();
    formData.append('data', uploadResource);

    return customInstance<unknown>({ url: `/resources/upload/${username}/${type}`, method: 'post', data: formData });
};

export const usePostResourcesUploadUsernameType = <
    TError = UploadResourceResponse | BadRequestResponse | UnauthorizedResponse | InternalServerErrorResponse,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof postResourcesUploadUsernameType>,
        TError,
        { username: string; type: string; data: UploadResource },
        TContext
    >;
}) => {
    const { mutation: mutationOptions } = options || {};

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof postResourcesUploadUsernameType>,
        { username: string; type: string; data: UploadResource }
    > = (props) => {
        const { username, type, data } = props || {};

        return postResourcesUploadUsernameType(username, type, data);
    };

    return useMutation<
        AsyncReturnType<typeof postResourcesUploadUsernameType>,
        TError,
        { username: string; type: string; data: UploadResource },
        TContext
    >(mutationFn, mutationOptions);
};
