/**
 * Generated by orval v6.2.3 üç∫
 * Do not edit manually.
 * Iamus API
 * This is a REST API for interfacing with Iamus. This API provides endpoints for interacting with user information, submissions, and reviews.
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction
} from 'react-query'
import type {
  DeleteUserUsername200,
  UnauthorizedResponse,
  InternalServerErrorResponse,
  GetUserUsername200,
  NotFoundResponse,
  PatchUserUsername200,
  BadRequestResponse,
  GetUserUsernameRole200,
  PatchUserUsernameRole200,
  GetUserUsernameFollow200,
  PostUserUsernameFollow200,
  DeleteUserUsernameFollow200,
  GetUserUsernameFollowers200,
  GetUserUsernameFollowing200
} from '.././models'
import { customInstance } from '.././mutator/custom-instance'

type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


/**
 * User account deletion endpoint, delete a user by the id.
 * @summary Account deletion
 */
export const deleteUserUsername = (
    username: string,
 ) => {
      return customInstance<DeleteUserUsername200>(
      {url: `/user/${username}`, method: 'delete'
    },
      );
    }
  


    export const useDeleteUserUsername = <TError = UnauthorizedResponse | InternalServerErrorResponse,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof deleteUserUsername>, TError,{username: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      const mutationFn: MutationFunction<AsyncReturnType<typeof deleteUserUsername>, {username: string}> = (props) => {
          const {username} = props || {};

          return  deleteUserUsername(username,)
        }

      return useMutation<AsyncReturnType<typeof deleteUserUsername>, TError, {username: string}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * User account information endpoint, get user details by the id.
 * @summary Account information
 */
export const getUserUsername = (
    username: string,
 ) => {
      return customInstance<GetUserUsername200>(
      {url: `/user/${username}`, method: 'get'
    },
      );
    }
  

export const getGetUserUsernameQueryKey = (username: string,) => [`/user/${username}`];

    
export const useGetUserUsername = <TData = AsyncReturnType<typeof getUserUsername>, TError = NotFoundResponse | InternalServerErrorResponse>(
 username: string, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getUserUsername>, TError, TData>, }

  ) => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetUserUsernameQueryKey(username);
  const queryFn: QueryFunction<AsyncReturnType<typeof getUserUsername>> = () => getUserUsername(username, );

  const query = useQuery<AsyncReturnType<typeof getUserUsername>, TError, TData>(queryKey, queryFn, {enabled: !!(username), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

/**
 * Update user information endpoint, update user details for a user specified by the user id.
 * @summary Update account information
 */
export const patchUserUsername = (
    username: string,
 ) => {
      return customInstance<PatchUserUsername200>(
      {url: `/user/${username}`, method: 'patch',
      data: undefined
    },
      );
    }
  


    export const usePatchUserUsername = <TError = BadRequestResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof patchUserUsername>, TError,{username: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      const mutationFn: MutationFunction<AsyncReturnType<typeof patchUserUsername>, {username: string}> = (props) => {
          const {username} = props || {};

          return  patchUserUsername(username,)
        }

      return useMutation<AsyncReturnType<typeof patchUserUsername>, TError, {username: string}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Endpoint for getting user role by id.
 * @summary Get user role
 */
export const getUserUsernameRole = (
    username: string,
 ) => {
      return customInstance<GetUserUsernameRole200>(
      {url: `/user/${username}/role`, method: 'get'
    },
      );
    }
  

export const getGetUserUsernameRoleQueryKey = (username: string,) => [`/user/${username}/role`];

    
export const useGetUserUsernameRole = <TData = AsyncReturnType<typeof getUserUsernameRole>, TError = BadRequestResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse>(
 username: string, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getUserUsernameRole>, TError, TData>, }

  ) => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetUserUsernameRoleQueryKey(username);
  const queryFn: QueryFunction<AsyncReturnType<typeof getUserUsernameRole>> = () => getUserUsernameRole(username, );

  const query = useQuery<AsyncReturnType<typeof getUserUsernameRole>, TError, TData>(queryKey, queryFn, {enabled: !!(username), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

/**
 * Endpoint for updating user role by id.
 * @summary Update user role
 */
export const patchUserUsernameRole = (
    username: string,
 ) => {
      return customInstance<PatchUserUsernameRole200>(
      {url: `/user/${username}/role`, method: 'patch',
      data: undefined
    },
      );
    }
  


    export const usePatchUserUsernameRole = <TError = BadRequestResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof patchUserUsernameRole>, TError,{username: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      const mutationFn: MutationFunction<AsyncReturnType<typeof patchUserUsernameRole>, {username: string}> = (props) => {
          const {username} = props || {};

          return  patchUserUsernameRole(username,)
        }

      return useMutation<AsyncReturnType<typeof patchUserUsernameRole>, TError, {username: string}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Endpoint for checking if the current user is following another user specified by the given id.
 * @summary Get the current user's follow status.
 */
export const getUserUsernameFollow = (
    username: string,
 ) => {
      return customInstance<GetUserUsernameFollow200>(
      {url: `/user/${username}/follow`, method: 'get'
    },
      );
    }
  

export const getGetUserUsernameFollowQueryKey = (username: string,) => [`/user/${username}/follow`];

    
export const useGetUserUsernameFollow = <TData = AsyncReturnType<typeof getUserUsernameFollow>, TError = BadRequestResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse>(
 username: string, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getUserUsernameFollow>, TError, TData>, }

  ) => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetUserUsernameFollowQueryKey(username);
  const queryFn: QueryFunction<AsyncReturnType<typeof getUserUsernameFollow>> = () => getUserUsernameFollow(username, );

  const query = useQuery<AsyncReturnType<typeof getUserUsernameFollow>, TError, TData>(queryKey, queryFn, {enabled: !!(username), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

/**
 * Endpoint for current user to follow another legit user.
 * @summary Follow another user
 */
export const postUserUsernameFollow = (
    username: string,
 ) => {
      return customInstance<PostUserUsernameFollow200>(
      {url: `/user/${username}/follow`, method: 'post',
      data: undefined
    },
      );
    }
  


    export const usePostUserUsernameFollow = <TError = BadRequestResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postUserUsernameFollow>, TError,{username: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      const mutationFn: MutationFunction<AsyncReturnType<typeof postUserUsernameFollow>, {username: string}> = (props) => {
          const {username} = props || {};

          return  postUserUsernameFollow(username,)
        }

      return useMutation<AsyncReturnType<typeof postUserUsernameFollow>, TError, {username: string}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Endpoint for current user to unfollow another legit user.
 * @summary Unfollowing another user.
 */
export const deleteUserUsernameFollow = (
    username: string,
 ) => {
      return customInstance<DeleteUserUsernameFollow200>(
      {url: `/user/${username}/follow`, method: 'delete'
    },
      );
    }
  


    export const useDeleteUserUsernameFollow = <TError = BadRequestResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof deleteUserUsernameFollow>, TError,{username: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      const mutationFn: MutationFunction<AsyncReturnType<typeof deleteUserUsernameFollow>, {username: string}> = (props) => {
          const {username} = props || {};

          return  deleteUserUsernameFollow(username,)
        }

      return useMutation<AsyncReturnType<typeof deleteUserUsernameFollow>, TError, {username: string}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Endpoint for getting any user's follower list.
 * @summary Get a user's follower list.
 */
export const getUserUsernameFollowers = (
    username: string,
 ) => {
      return customInstance<GetUserUsernameFollowers200>(
      {url: `/user/${username}/followers`, method: 'get'
    },
      );
    }
  

export const getGetUserUsernameFollowersQueryKey = (username: string,) => [`/user/${username}/followers`];

    
export const useGetUserUsernameFollowers = <TData = AsyncReturnType<typeof getUserUsernameFollowers>, TError = BadRequestResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse>(
 username: string, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getUserUsernameFollowers>, TError, TData>, }

  ) => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetUserUsernameFollowersQueryKey(username);
  const queryFn: QueryFunction<AsyncReturnType<typeof getUserUsernameFollowers>> = () => getUserUsernameFollowers(username, );

  const query = useQuery<AsyncReturnType<typeof getUserUsernameFollowers>, TError, TData>(queryKey, queryFn, {enabled: !!(username), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

/**
 * Endpoint for fetching a user's follows list
 * @summary Get a user's following list.
 */
export const getUserUsernameFollowing = (
    username: string,
 ) => {
      return customInstance<GetUserUsernameFollowing200>(
      {url: `/user/${username}/following`, method: 'get'
    },
      );
    }
  

export const getGetUserUsernameFollowingQueryKey = (username: string,) => [`/user/${username}/following`];

    
export const useGetUserUsernameFollowing = <TData = AsyncReturnType<typeof getUserUsernameFollowing>, TError = BadRequestResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse>(
 username: string, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getUserUsernameFollowing>, TError, TData>, }

  ) => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetUserUsernameFollowingQueryKey(username);
  const queryFn: QueryFunction<AsyncReturnType<typeof getUserUsernameFollowing>> = () => getUserUsernameFollowing(username, );

  const query = useQuery<AsyncReturnType<typeof getUserUsernameFollowing>, TError, TData>(queryKey, queryFn, {enabled: !!(username), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

