/**
 * Generated by orval v6.2.3 🍺
 * Do not edit manually.
 * Iamus API
 * This is a REST API for interfacing with Iamus. This API provides endpoints for interacting with user information, submissions, and reviews.
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import faker from 'faker';
import type { UserLogin } from '.././models';

export const getPostUserLoginMock = () => ({
    status: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    token: faker.random.word(),
    refreshToken: faker.random.word(),
    user: {
        id: faker.random.word(),
        email: faker.random.word(),
        username: faker.random.word(),
        firstName: faker.random.word(),
        lastName: faker.random.word(),
        profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
        about: faker.helpers.randomize([faker.random.word(), undefined]),
    },
});

export const getPostUserRegisterMock = () => ({
    status: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    token: faker.random.word(),
    refreshToken: faker.random.word(),
    user: {
        id: faker.random.word(),
        email: faker.random.word(),
        username: faker.random.word(),
        firstName: faker.random.word(),
        lastName: faker.random.word(),
        profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
        about: faker.helpers.randomize([faker.random.word(), undefined]),
    },
});

export const getDeleteUserUsernameMock = () => ({
    status: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    description: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getGetUserUsernameMock = () => ({
    status: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    user: faker.helpers.randomize([
        {
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            firstName: faker.random.word(),
            lastName: faker.random.word(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        },
        undefined,
    ]),
});

export const getPatchUserUsernameMock = () => ({
    status: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    user: faker.helpers.randomize([
        {
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            firstName: faker.random.word(),
            lastName: faker.random.word(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        },
        undefined,
    ]),
});

export const getGetUserUsernameRoleMock = () => ({
    status: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    role: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getPatchUserUsernameRoleMock = () => ({
    status: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    message: faker.helpers.randomize([faker.random.word(), undefined]),
    role: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getGetUserUsernameFollowMock = () => ({
    status: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    following: faker.datatype.boolean(),
    message: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getPostUserUsernameFollowMock = () => ({
    status: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    message: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getDeleteUserUsernameFollowMock = () => ({
    status: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    message: faker.helpers.randomize([faker.random.word(), undefined]),
});

export const getGetUserUsernameFollowersMock = () => ({
    status: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    data: faker.helpers.randomize([
        {
            followers: faker.helpers.randomize([
                [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                    id: faker.random.word(),
                    email: faker.random.word(),
                    username: faker.random.word(),
                    firstName: faker.random.word(),
                    lastName: faker.random.word(),
                    profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
                    about: faker.helpers.randomize([faker.random.word(), undefined]),
                })),
                undefined,
            ]),
        },
        undefined,
    ]),
});

export const getGetUserUsernameFollowingMock = () => ({
    status: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
    data: faker.helpers.randomize([
        {
            following: faker.helpers.randomize([
                [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                    id: faker.random.word(),
                    email: faker.random.word(),
                    username: faker.random.word(),
                    firstName: faker.random.word(),
                    lastName: faker.random.word(),
                    profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
                    about: faker.helpers.randomize([faker.random.word(), undefined]),
                })),
                undefined,
            ]),
        },
        undefined,
    ]),
});

export const getUsersMSW = () => [
    rest.post('*/user/login', (req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getPostUserLoginMock()));
    }),
    rest.post('*/user/register', (req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getPostUserRegisterMock()));
    }),
    rest.delete('*/user/:username', (req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getDeleteUserUsernameMock()));
    }),
    rest.get('*/user/:username', (req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetUserUsernameMock()));
    }),
    rest.patch('*/user/:username', (req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getPatchUserUsernameMock()));
    }),
    rest.get('*/user/:username/role', (req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetUserUsernameRoleMock()));
    }),
    rest.patch('*/user/:username/role', (req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getPatchUserUsernameRoleMock()));
    }),
    rest.get('*/user/:username/follow', (req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetUserUsernameFollowMock()));
    }),
    rest.post('*/user/:username/follow', (req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getPostUserUsernameFollowMock()));
    }),
    rest.delete('*/user/:username/follow', (req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getDeleteUserUsernameFollowMock()));
    }),
    rest.get('*/user/:username/followers', (req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetUserUsernameFollowersMock()));
    }),
    rest.get('*/user/:username/following', (req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetUserUsernameFollowingMock()));
    }),
];
