/**
 * Generated by orval v6.2.3 🍺
 * Do not edit manually.
 * Iamus API
 * This is a REST API for interfacing with Iamus. This API provides endpoints for interacting with user information, submissions, and reviews.
 * OpenAPI spec version: 1.0.0
 */
import {
  rest
} from 'msw'
import faker from 'faker'

export const getGetPublicationUsernameMock = () => ({data: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({collaborators: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({about: faker.helpers.randomize([faker.random.word(), undefined]), email: faker.random.word(), firstName: faker.random.word(), id: faker.random.word(), lastName: faker.random.word(), profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]), status: faker.helpers.randomize([faker.random.word(), undefined]), username: faker.random.word()})), introduction: faker.random.word(), name: faker.random.word(), revision: faker.random.word(), title: faker.random.word()})), status: faker.datatype.boolean()})

export const getDeletePublicationUsernameNameMock = () => ({message: faker.random.word(), status: faker.datatype.boolean()})

export const getGetPublicationUsernameNameMock = () => ({publication: {collaborators: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({about: faker.helpers.randomize([faker.random.word(), undefined]), email: faker.random.word(), firstName: faker.random.word(), id: faker.random.word(), lastName: faker.random.word(), profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]), status: faker.helpers.randomize([faker.random.word(), undefined]), username: faker.random.word()})), introduction: faker.random.word(), name: faker.random.word(), revision: faker.random.word(), title: faker.random.word()}, status: faker.datatype.boolean()})

export const getGetPublicationUsernameNameTreePathMock = () => ({data: faker.helpers.randomize([{data: {contents: faker.random.word(), type: faker.random.word(), updatedAt: faker.datatype.number()}, status: faker.datatype.boolean()},{data: {entries: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({filename: faker.random.word(), type: faker.random.word(), updatedAt: faker.datatype.number()})), undefined]), type: faker.random.word()}, status: faker.datatype.boolean()}]), status: faker.datatype.boolean()})

export const getDeletePublicationUsernameNameRevisionMock = () => ({message: faker.random.word(), status: faker.datatype.boolean()})

export const getGetPublicationUsernameNameRevisionMock = () => ({publication: {collaborators: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({about: faker.helpers.randomize([faker.random.word(), undefined]), email: faker.random.word(), firstName: faker.random.word(), id: faker.random.word(), lastName: faker.random.word(), profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]), status: faker.helpers.randomize([faker.random.word(), undefined]), username: faker.random.word()})), introduction: faker.random.word(), name: faker.random.word(), revision: faker.random.word(), title: faker.random.word()}, status: faker.datatype.boolean()})

export const getGetPublicationUsernameNameRevisionTreePathMock = () => ({data: faker.helpers.randomize([{data: {contents: faker.random.word(), type: faker.random.word(), updatedAt: faker.datatype.number()}, status: faker.datatype.boolean()},{data: {entries: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({filename: faker.random.word(), type: faker.random.word(), updatedAt: faker.datatype.number()})), undefined]), type: faker.random.word()}, status: faker.datatype.boolean()}]), status: faker.datatype.boolean()})

export const getPublicationsMSW = () => [
rest.post('*/publication', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/publication/:username', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetPublicationUsernameMock()),
        )
      }),rest.delete('*/publication/:username/:name', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDeletePublicationUsernameNameMock()),
        )
      }),rest.get('*/publication/:username/:name', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetPublicationUsernameNameMock()),
        )
      }),rest.get('*/publication/:username/:name/tree/:path', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetPublicationUsernameNameTreePathMock()),
        )
      }),rest.delete('*/publication/:username/:name/:revision', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDeletePublicationUsernameNameRevisionMock()),
        )
      }),rest.get('*/publication/:username/:name/:revision', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetPublicationUsernameNameRevisionMock()),
        )
      }),rest.get('*/publication/:username/:name/:revision/tree/:path', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetPublicationUsernameNameRevisionTreePathMock()),
        )
      }),]
