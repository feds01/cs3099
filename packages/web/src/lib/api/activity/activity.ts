/**
 * Generated by orval v6.6.4 üç∫
 * Do not edit manually.
 * Iamus API
 * This is a REST API for interfacing with Iamus. This API provides endpoints for interacting with user information, submissions, and reviews.
 * OpenAPI spec version: 1.0.0
 */
import type {
    GetUserUsernameFeed200,
    ApiErrorResponse,
    GetUserUsernameFeedParams,
    GetActivityId200,
    GetActivity200,
    GetActivityParams,
} from '.././models';
import { customInstance } from '.././mutator/custom-instance';
import { useQuery, UseQueryOptions, QueryFunction, UseQueryResult, QueryKey } from 'react-query';

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;

/**
 * Get a paginated list of activities for a particular user=
 * @summary List activities for a given user
 */
export const getUserUsernameFeed = (username: string, params?: GetUserUsernameFeedParams) => {
    return customInstance<GetUserUsernameFeed200>({ url: `/user/${username}/feed`, method: 'get', params });
};

export const getGetUserUsernameFeedQueryKey = (username: string, params?: GetUserUsernameFeedParams) => [
    `/user/${username}/feed`,
    ...(params ? [params] : []),
];

export const useGetUserUsernameFeed = <TData = AsyncReturnType<typeof getUserUsernameFeed>, TError = ApiErrorResponse>(
    username: string,
    params?: GetUserUsernameFeedParams,
    options?: { query?: UseQueryOptions<AsyncReturnType<typeof getUserUsernameFeed>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {};

    const queryKey = queryOptions?.queryKey ?? getGetUserUsernameFeedQueryKey(username, params);

    const queryFn: QueryFunction<AsyncReturnType<typeof getUserUsernameFeed>> = () =>
        getUserUsernameFeed(username, params);

    const query = useQuery<AsyncReturnType<typeof getUserUsernameFeed>, TError, TData>(queryKey, queryFn, {
        enabled: !!username,
        ...queryOptions,
    });

    return {
        queryKey,
        ...query,
    };
};

/**
 * Get an activity by ID
 * @summary Activity by ID
 */
export const getActivityId = (id: string) => {
    return customInstance<GetActivityId200>({ url: `/activity/${id}`, method: 'get' });
};

export const getGetActivityIdQueryKey = (id: string) => [`/activity/${id}`];

export const useGetActivityId = <TData = AsyncReturnType<typeof getActivityId>, TError = ApiErrorResponse>(
    id: string,
    options?: { query?: UseQueryOptions<AsyncReturnType<typeof getActivityId>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {};

    const queryKey = queryOptions?.queryKey ?? getGetActivityIdQueryKey(id);

    const queryFn: QueryFunction<AsyncReturnType<typeof getActivityId>> = () => getActivityId(id);

    const query = useQuery<AsyncReturnType<typeof getActivityId>, TError, TData>(queryKey, queryFn, {
        enabled: !!id,
        ...queryOptions,
    });

    return {
        queryKey,
        ...query,
    };
};

/**
 * Get a paginated activities for a user
 * @summary User activity feed
 */
export const getActivity = (params?: GetActivityParams) => {
    return customInstance<GetActivity200>({ url: `/activity`, method: 'get', params });
};

export const getGetActivityQueryKey = (params?: GetActivityParams) => [`/activity`, ...(params ? [params] : [])];

export const useGetActivity = <TData = AsyncReturnType<typeof getActivity>, TError = ApiErrorResponse>(
    params?: GetActivityParams,
    options?: { query?: UseQueryOptions<AsyncReturnType<typeof getActivity>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {};

    const queryKey = queryOptions?.queryKey ?? getGetActivityQueryKey(params);

    const queryFn: QueryFunction<AsyncReturnType<typeof getActivity>> = () => getActivity(params);

    const query = useQuery<AsyncReturnType<typeof getActivity>, TError, TData>(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};
