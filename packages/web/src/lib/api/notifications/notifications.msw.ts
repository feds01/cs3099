/**
 * Generated by orval v6.6.4 🍺
 * Do not edit manually.
 * Iamus API
 * This is a REST API for interfacing with Iamus. This API provides endpoints for interacting with user information, submissions, and reviews.
 * OpenAPI spec version: 1.0.0
 */
import { SuccessStatus, UserRole, ReviewStatus } from '.././models';
import faker from 'faker';
import { rest } from 'msw';

export const getGetNotificationsMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    notifications: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
        id: faker.random.word(),
        commentId: faker.random.word(),
        author: {
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        },
        tagging: {
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        },
        review: {
            publication: {
                id: faker.random.word(),
                name: faker.random.word(),
                title: faker.random.word(),
                introduction: faker.helpers.randomize([faker.random.word(), undefined]),
                changelog: faker.helpers.randomize([faker.random.word(), undefined]),
                about: faker.helpers.randomize([faker.random.word(), undefined]),
                revision: faker.random.word(),
                pinned: faker.datatype.boolean(),
                draft: faker.datatype.boolean(),
                current: faker.datatype.boolean(),
                reviews: faker.datatype.number(),
                owner: {
                    id: faker.random.word(),
                    email: faker.random.word(),
                    username: faker.random.word(),
                    role: faker.helpers.randomize(Object.values(UserRole)),
                    name: faker.helpers.randomize([faker.random.word(), undefined]),
                    createdAt: faker.datatype.number(),
                    profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
                    status: faker.helpers.randomize([faker.random.word(), undefined]),
                    about: faker.helpers.randomize([faker.random.word(), undefined]),
                },
                attachment: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
                collaborators: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                    id: faker.random.word(),
                    email: faker.random.word(),
                    username: faker.random.word(),
                    role: faker.helpers.randomize(Object.values(UserRole)),
                    name: faker.helpers.randomize([faker.random.word(), undefined]),
                    createdAt: faker.datatype.number(),
                    profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
                    status: faker.helpers.randomize([faker.random.word(), undefined]),
                    about: faker.helpers.randomize([faker.random.word(), undefined]),
                })),
                createdAt: faker.datatype.number(),
                updatedAt: faker.datatype.number(),
            },
            owner: {
                id: faker.random.word(),
                email: faker.random.word(),
                username: faker.random.word(),
                role: faker.helpers.randomize(Object.values(UserRole)),
                name: faker.helpers.randomize([faker.random.word(), undefined]),
                createdAt: faker.datatype.number(),
                profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
                status: faker.helpers.randomize([faker.random.word(), undefined]),
                about: faker.helpers.randomize([faker.random.word(), undefined]),
            },
            createdAt: faker.datatype.number(),
            updatedAt: faker.datatype.number(),
            status: faker.helpers.randomize(Object.values(ReviewStatus)),
            id: faker.random.word(),
        },
        createdAt: faker.datatype.number(),
        updatedAt: faker.datatype.number(),
    })),
    skip: faker.datatype.number(),
    take: faker.datatype.number(),
    total: faker.datatype.number(),
});

export const getGetNotificationsIdMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    notification: {
        id: faker.random.word(),
        commentId: faker.random.word(),
        author: {
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        },
        tagging: {
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        },
        review: {
            publication: {
                id: faker.random.word(),
                name: faker.random.word(),
                title: faker.random.word(),
                introduction: faker.helpers.randomize([faker.random.word(), undefined]),
                changelog: faker.helpers.randomize([faker.random.word(), undefined]),
                about: faker.helpers.randomize([faker.random.word(), undefined]),
                revision: faker.random.word(),
                pinned: faker.datatype.boolean(),
                draft: faker.datatype.boolean(),
                current: faker.datatype.boolean(),
                reviews: faker.datatype.number(),
                owner: {
                    id: faker.random.word(),
                    email: faker.random.word(),
                    username: faker.random.word(),
                    role: faker.helpers.randomize(Object.values(UserRole)),
                    name: faker.helpers.randomize([faker.random.word(), undefined]),
                    createdAt: faker.datatype.number(),
                    profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
                    status: faker.helpers.randomize([faker.random.word(), undefined]),
                    about: faker.helpers.randomize([faker.random.word(), undefined]),
                },
                attachment: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
                collaborators: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                    id: faker.random.word(),
                    email: faker.random.word(),
                    username: faker.random.word(),
                    role: faker.helpers.randomize(Object.values(UserRole)),
                    name: faker.helpers.randomize([faker.random.word(), undefined]),
                    createdAt: faker.datatype.number(),
                    profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
                    status: faker.helpers.randomize([faker.random.word(), undefined]),
                    about: faker.helpers.randomize([faker.random.word(), undefined]),
                })),
                createdAt: faker.datatype.number(),
                updatedAt: faker.datatype.number(),
            },
            owner: {
                id: faker.random.word(),
                email: faker.random.word(),
                username: faker.random.word(),
                role: faker.helpers.randomize(Object.values(UserRole)),
                name: faker.helpers.randomize([faker.random.word(), undefined]),
                createdAt: faker.datatype.number(),
                profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
                status: faker.helpers.randomize([faker.random.word(), undefined]),
                about: faker.helpers.randomize([faker.random.word(), undefined]),
            },
            createdAt: faker.datatype.number(),
            updatedAt: faker.datatype.number(),
            status: faker.helpers.randomize(Object.values(ReviewStatus)),
            id: faker.random.word(),
        },
        createdAt: faker.datatype.number(),
        updatedAt: faker.datatype.number(),
    },
});

export const getNotificationsMSW = () => [
    rest.get('*/notifications', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetNotificationsMock()));
    }),
    rest.get('*/notifications/:id', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetNotificationsIdMock()));
    }),
    rest.post('*/notifications/:id/view', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
    }),
];
