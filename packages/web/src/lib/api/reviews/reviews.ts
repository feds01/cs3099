/**
 * Generated by orval v6.6.4 üç∫
 * Do not edit manually.
 * Iamus API
 * This is a REST API for interfacing with Iamus. This API provides endpoints for interacting with user information, submissions, and reviews.
 * OpenAPI spec version: 1.0.0
 */
import type {
    PostPublicationUsernameNameReview200,
    ApiErrorResponse,
    PostPublicationUsernameNameReviewParams,
    GetPublicationUsernameNameReviews200,
    GetPublicationUsernameNameReviewsParams,
    PostPublicationbyidIdReview200,
    GetPublicationbyidIdReviews200,
    GetPublicationbyidIdReviewsParams,
    PutReviewIdComment200,
    CreateCommentRequestBody,
    GetReview200,
    GetReviewParams,
    GetReviewId200,
    NoContentResponse,
    GetReviewIdComments200,
} from '.././models';
import { customInstance } from '.././mutator/custom-instance';
import {
    useQuery,
    useMutation,
    UseQueryOptions,
    UseMutationOptions,
    QueryFunction,
    MutationFunction,
    UseQueryResult,
    QueryKey,
} from 'react-query';

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;

/**
 * Begin a review process on a publication.
 * @summary Create a review on a publication.
 */
export const postPublicationUsernameNameReview = (
    username: string,
    name: string,
    params?: PostPublicationUsernameNameReviewParams,
) => {
    return customInstance<PostPublicationUsernameNameReview200>({
        url: `/publication/${username}/${name}/review`,
        method: 'post',
        params,
    });
};

export const usePostPublicationUsernameNameReview = <TError = ApiErrorResponse, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof postPublicationUsernameNameReview>,
        TError,
        { username: string; name: string; params?: PostPublicationUsernameNameReviewParams },
        TContext
    >;
}) => {
    const { mutation: mutationOptions } = options || {};

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof postPublicationUsernameNameReview>,
        { username: string; name: string; params?: PostPublicationUsernameNameReviewParams }
    > = (props) => {
        const { username, name, params } = props || {};

        return postPublicationUsernameNameReview(username, name, params);
    };

    return useMutation<
        AsyncReturnType<typeof postPublicationUsernameNameReview>,
        TError,
        { username: string; name: string; params?: PostPublicationUsernameNameReviewParams },
        TContext
    >(mutationFn, mutationOptions);
};
/**
 * Get a paginated list of publication reviews.
 * @summary Get a list of reviews on a publication
 */
export const getPublicationUsernameNameReviews = (
    username: string,
    name: string,
    params?: GetPublicationUsernameNameReviewsParams,
) => {
    return customInstance<GetPublicationUsernameNameReviews200>({
        url: `/publication/${username}/${name}/reviews`,
        method: 'get',
        params,
    });
};

export const getGetPublicationUsernameNameReviewsQueryKey = (
    username: string,
    name: string,
    params?: GetPublicationUsernameNameReviewsParams,
) => [`/publication/${username}/${name}/reviews`, ...(params ? [params] : [])];

export const useGetPublicationUsernameNameReviews = <
    TData = AsyncReturnType<typeof getPublicationUsernameNameReviews>,
    TError = ApiErrorResponse,
>(
    username: string,
    name: string,
    params?: GetPublicationUsernameNameReviewsParams,
    options?: { query?: UseQueryOptions<AsyncReturnType<typeof getPublicationUsernameNameReviews>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {};

    const queryKey = queryOptions?.queryKey ?? getGetPublicationUsernameNameReviewsQueryKey(username, name, params);

    const queryFn: QueryFunction<AsyncReturnType<typeof getPublicationUsernameNameReviews>> = () =>
        getPublicationUsernameNameReviews(username, name, params);

    const query = useQuery<AsyncReturnType<typeof getPublicationUsernameNameReviews>, TError, TData>(
        queryKey,
        queryFn,
        { enabled: !!(username && name), ...queryOptions },
    );

    return {
        queryKey,
        ...query,
    };
};

/**
 * Begin a review process on a publication.
 * @summary Create a review on a publication.
 */
export const postPublicationbyidIdReview = (id: string) => {
    return customInstance<PostPublicationbyidIdReview200>({ url: `/publication-by-id/${id}/review`, method: 'post' });
};

export const usePostPublicationbyidIdReview = <TError = ApiErrorResponse, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof postPublicationbyidIdReview>,
        TError,
        { id: string },
        TContext
    >;
}) => {
    const { mutation: mutationOptions } = options || {};

    const mutationFn: MutationFunction<AsyncReturnType<typeof postPublicationbyidIdReview>, { id: string }> = (
        props,
    ) => {
        const { id } = props || {};

        return postPublicationbyidIdReview(id);
    };

    return useMutation<AsyncReturnType<typeof postPublicationbyidIdReview>, TError, { id: string }, TContext>(
        mutationFn,
        mutationOptions,
    );
};
/**
 * Get a paginated list of publication reviews.
 * @summary Get a list of reviews on a publication
 */
export const getPublicationbyidIdReviews = (id: string, params?: GetPublicationbyidIdReviewsParams) => {
    return customInstance<GetPublicationbyidIdReviews200>({
        url: `/publication-by-id/${id}/reviews`,
        method: 'get',
        params,
    });
};

export const getGetPublicationbyidIdReviewsQueryKey = (id: string, params?: GetPublicationbyidIdReviewsParams) => [
    `/publication-by-id/${id}/reviews`,
    ...(params ? [params] : []),
];

export const useGetPublicationbyidIdReviews = <
    TData = AsyncReturnType<typeof getPublicationbyidIdReviews>,
    TError = ApiErrorResponse,
>(
    id: string,
    params?: GetPublicationbyidIdReviewsParams,
    options?: { query?: UseQueryOptions<AsyncReturnType<typeof getPublicationbyidIdReviews>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {};

    const queryKey = queryOptions?.queryKey ?? getGetPublicationbyidIdReviewsQueryKey(id, params);

    const queryFn: QueryFunction<AsyncReturnType<typeof getPublicationbyidIdReviews>> = () =>
        getPublicationbyidIdReviews(id, params);

    const query = useQuery<AsyncReturnType<typeof getPublicationbyidIdReviews>, TError, TData>(queryKey, queryFn, {
        enabled: !!id,
        ...queryOptions,
    });

    return {
        queryKey,
        ...query,
    };
};

/**
 * Comment on a review, specified by the review id.
 * @summary Add a comment to a review.
 */
export const putReviewIdComment = (id: string, createCommentRequestBody: CreateCommentRequestBody) => {
    return customInstance<PutReviewIdComment200>({
        url: `/review/${id}/comment`,
        method: 'put',
        data: createCommentRequestBody,
    });
};

export const usePutReviewIdComment = <TError = ApiErrorResponse, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        AsyncReturnType<typeof putReviewIdComment>,
        TError,
        { id: string; data: CreateCommentRequestBody },
        TContext
    >;
}) => {
    const { mutation: mutationOptions } = options || {};

    const mutationFn: MutationFunction<
        AsyncReturnType<typeof putReviewIdComment>,
        { id: string; data: CreateCommentRequestBody }
    > = (props) => {
        const { id, data } = props || {};

        return putReviewIdComment(id, data);
    };

    return useMutation<
        AsyncReturnType<typeof putReviewIdComment>,
        TError,
        { id: string; data: CreateCommentRequestBody },
        TContext
    >(mutationFn, mutationOptions);
};
/**
 * Get all relevant reviews for a requester
 * @summary Paginated reviews for a requester
 */
export const getReview = (params?: GetReviewParams) => {
    return customInstance<GetReview200>({ url: `/review`, method: 'get', params });
};

export const getGetReviewQueryKey = (params?: GetReviewParams) => [`/review`, ...(params ? [params] : [])];

export const useGetReview = <TData = AsyncReturnType<typeof getReview>, TError = ApiErrorResponse>(
    params?: GetReviewParams,
    options?: { query?: UseQueryOptions<AsyncReturnType<typeof getReview>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {};

    const queryKey = queryOptions?.queryKey ?? getGetReviewQueryKey(params);

    const queryFn: QueryFunction<AsyncReturnType<typeof getReview>> = () => getReview(params);

    const query = useQuery<AsyncReturnType<typeof getReview>, TError, TData>(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * get review by user id.
 * @summary Get a review.
 */
export const getReviewId = (id: string) => {
    return customInstance<GetReviewId200>({ url: `/review/${id}`, method: 'get' });
};

export const getGetReviewIdQueryKey = (id: string) => [`/review/${id}`];

export const useGetReviewId = <TData = AsyncReturnType<typeof getReviewId>, TError = ApiErrorResponse>(
    id: string,
    options?: { query?: UseQueryOptions<AsyncReturnType<typeof getReviewId>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {};

    const queryKey = queryOptions?.queryKey ?? getGetReviewIdQueryKey(id);

    const queryFn: QueryFunction<AsyncReturnType<typeof getReviewId>> = () => getReviewId(id);

    const query = useQuery<AsyncReturnType<typeof getReviewId>, TError, TData>(queryKey, queryFn, {
        enabled: !!id,
        ...queryOptions,
    });

    return {
        queryKey,
        ...query,
    };
};

/**
 * delete review by user id.
 * @summary Delete a review
 */
export const deleteReviewId = (id: string) => {
    return customInstance<NoContentResponse>({ url: `/review/${id}`, method: 'delete' });
};

export const useDeleteReviewId = <TError = ApiErrorResponse, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<AsyncReturnType<typeof deleteReviewId>, TError, { id: string }, TContext>;
}) => {
    const { mutation: mutationOptions } = options || {};

    const mutationFn: MutationFunction<AsyncReturnType<typeof deleteReviewId>, { id: string }> = (props) => {
        const { id } = props || {};

        return deleteReviewId(id);
    };

    return useMutation<AsyncReturnType<typeof deleteReviewId>, TError, { id: string }, TContext>(
        mutationFn,
        mutationOptions,
    );
};
/**
 * get a paginated list of comments on a review.
 * @summary Get comments on a review.
 */
export const getReviewIdComments = (id: string) => {
    return customInstance<GetReviewIdComments200>({ url: `/review/${id}/comments`, method: 'get' });
};

export const getGetReviewIdCommentsQueryKey = (id: string) => [`/review/${id}/comments`];

export const useGetReviewIdComments = <TData = AsyncReturnType<typeof getReviewIdComments>, TError = ApiErrorResponse>(
    id: string,
    options?: { query?: UseQueryOptions<AsyncReturnType<typeof getReviewIdComments>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {};

    const queryKey = queryOptions?.queryKey ?? getGetReviewIdCommentsQueryKey(id);

    const queryFn: QueryFunction<AsyncReturnType<typeof getReviewIdComments>> = () => getReviewIdComments(id);

    const query = useQuery<AsyncReturnType<typeof getReviewIdComments>, TError, TData>(queryKey, queryFn, {
        enabled: !!id,
        ...queryOptions,
    });

    return {
        queryKey,
        ...query,
    };
};

/**
 * Publish the drafted review.
 * @summary Finalise a review.
 */
export const postReviewIdComplete = (id: string) => {
    return customInstance<NoContentResponse>({ url: `/review/${id}/complete`, method: 'post' });
};

export const usePostReviewIdComplete = <TError = ApiErrorResponse, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<AsyncReturnType<typeof postReviewIdComplete>, TError, { id: string }, TContext>;
}) => {
    const { mutation: mutationOptions } = options || {};

    const mutationFn: MutationFunction<AsyncReturnType<typeof postReviewIdComplete>, { id: string }> = (props) => {
        const { id } = props || {};

        return postReviewIdComplete(id);
    };

    return useMutation<AsyncReturnType<typeof postReviewIdComplete>, TError, { id: string }, TContext>(
        mutationFn,
        mutationOptions,
    );
};
