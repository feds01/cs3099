/**
 * Generated by orval v6.6.4 üç∫
 * Do not edit manually.
 * Iamus API
 * This is a REST API for interfacing with Iamus. This API provides endpoints for interacting with user information, submissions, and reviews.
 * OpenAPI spec version: 1.0.0
 */
import type { GetVersion200, GetOpenapi200 } from '.././models';
import { customInstance } from '.././mutator/custom-instance';
import { useQuery, UseQueryOptions, QueryFunction, UseQueryResult, QueryKey } from 'react-query';

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;

/**
 * Get the current version of the service
 * @summary Service version
 */
export const getVersion = () => {
    return customInstance<GetVersion200>({ url: `/version`, method: 'get' });
};

export const getGetVersionQueryKey = () => [`/version`];

export const useGetVersion = <TData = AsyncReturnType<typeof getVersion>, TError = unknown>(options?: {
    query?: UseQueryOptions<AsyncReturnType<typeof getVersion>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {};

    const queryKey = queryOptions?.queryKey ?? getGetVersionQueryKey();

    const queryFn: QueryFunction<AsyncReturnType<typeof getVersion>> = () => getVersion();

    const query = useQuery<AsyncReturnType<typeof getVersion>, TError, TData>(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};

/**
 * Get the current service OpenAPI schema
 * @summary Service OpenAPI schema
 */
export const getOpenapi = () => {
    return customInstance<GetOpenapi200>({ url: `/openapi`, method: 'get' });
};

export const getGetOpenapiQueryKey = () => [`/openapi`];

export const useGetOpenapi = <TData = AsyncReturnType<typeof getOpenapi>, TError = unknown>(options?: {
    query?: UseQueryOptions<AsyncReturnType<typeof getOpenapi>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {};

    const queryKey = queryOptions?.queryKey ?? getGetOpenapiQueryKey();

    const queryFn: QueryFunction<AsyncReturnType<typeof getOpenapi>> = () => getOpenapi();

    const query = useQuery<AsyncReturnType<typeof getOpenapi>, TError, TData>(queryKey, queryFn, queryOptions);

    return {
        queryKey,
        ...query,
    };
};
