/**
 * Generated by orval v6.6.4 🍺
 * Do not edit manually.
 * Iamus API
 * This is a REST API for interfacing with Iamus. This API provides endpoints for interacting with user information, submissions, and reviews.
 * OpenAPI spec version: 1.0.0
 */
import { SuccessStatus, UserRole } from '.././models';
import faker from 'faker';
import { rest } from 'msw';

export const getPostPublicationMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    publication: {
        id: faker.random.word(),
        name: faker.random.word(),
        title: faker.random.word(),
        introduction: faker.helpers.randomize([faker.random.word(), undefined]),
        changelog: faker.helpers.randomize([faker.random.word(), undefined]),
        about: faker.helpers.randomize([faker.random.word(), undefined]),
        revision: faker.random.word(),
        pinned: faker.datatype.boolean(),
        draft: faker.datatype.boolean(),
        current: faker.datatype.boolean(),
        reviews: faker.datatype.number(),
        owner: {
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        },
        attachment: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
        collaborators: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        })),
        createdAt: faker.datatype.number(),
        updatedAt: faker.datatype.number(),
    },
});

export const getGetPublicationMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    publications: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
        id: faker.random.word(),
        name: faker.random.word(),
        title: faker.random.word(),
        introduction: faker.helpers.randomize([faker.random.word(), undefined]),
        changelog: faker.helpers.randomize([faker.random.word(), undefined]),
        about: faker.helpers.randomize([faker.random.word(), undefined]),
        revision: faker.random.word(),
        pinned: faker.datatype.boolean(),
        draft: faker.datatype.boolean(),
        current: faker.datatype.boolean(),
        reviews: faker.datatype.number(),
        owner: {
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        },
        attachment: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
        collaborators: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        })),
        createdAt: faker.datatype.number(),
        updatedAt: faker.datatype.number(),
    })),
    skip: faker.datatype.number(),
    take: faker.datatype.number(),
    total: faker.datatype.number(),
});

export const getGetPublicationUsernameMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    publications: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
        id: faker.random.word(),
        name: faker.random.word(),
        title: faker.random.word(),
        introduction: faker.helpers.randomize([faker.random.word(), undefined]),
        changelog: faker.helpers.randomize([faker.random.word(), undefined]),
        about: faker.helpers.randomize([faker.random.word(), undefined]),
        revision: faker.random.word(),
        pinned: faker.datatype.boolean(),
        draft: faker.datatype.boolean(),
        current: faker.datatype.boolean(),
        reviews: faker.datatype.number(),
        owner: {
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        },
        attachment: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
        collaborators: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        })),
        createdAt: faker.datatype.number(),
        updatedAt: faker.datatype.number(),
    })),
    skip: faker.datatype.number(),
    take: faker.datatype.number(),
    total: faker.datatype.number(),
});

export const getDeletePublicationUsernameNameMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
});

export const getPatchPublicationUsernameNameMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    publication: {
        id: faker.random.word(),
        name: faker.random.word(),
        title: faker.random.word(),
        introduction: faker.helpers.randomize([faker.random.word(), undefined]),
        changelog: faker.helpers.randomize([faker.random.word(), undefined]),
        about: faker.helpers.randomize([faker.random.word(), undefined]),
        revision: faker.random.word(),
        pinned: faker.datatype.boolean(),
        draft: faker.datatype.boolean(),
        current: faker.datatype.boolean(),
        reviews: faker.datatype.number(),
        owner: {
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        },
        attachment: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
        collaborators: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        })),
        createdAt: faker.datatype.number(),
        updatedAt: faker.datatype.number(),
    },
});

export const getGetPublicationUsernameNameMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    publication: {
        id: faker.random.word(),
        name: faker.random.word(),
        title: faker.random.word(),
        introduction: faker.helpers.randomize([faker.random.word(), undefined]),
        changelog: faker.helpers.randomize([faker.random.word(), undefined]),
        about: faker.helpers.randomize([faker.random.word(), undefined]),
        revision: faker.random.word(),
        pinned: faker.datatype.boolean(),
        draft: faker.datatype.boolean(),
        current: faker.datatype.boolean(),
        reviews: faker.datatype.number(),
        owner: {
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        },
        attachment: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
        collaborators: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        })),
        createdAt: faker.datatype.number(),
        updatedAt: faker.datatype.number(),
    },
});

export const getPostPublicationUsernameNameExportMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
});

export const getPostPublicationUsernameNameReviseMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    publication: {
        id: faker.random.word(),
        name: faker.random.word(),
        title: faker.random.word(),
        introduction: faker.helpers.randomize([faker.random.word(), undefined]),
        changelog: faker.helpers.randomize([faker.random.word(), undefined]),
        about: faker.helpers.randomize([faker.random.word(), undefined]),
        revision: faker.random.word(),
        pinned: faker.datatype.boolean(),
        draft: faker.datatype.boolean(),
        current: faker.datatype.boolean(),
        reviews: faker.datatype.number(),
        owner: {
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        },
        attachment: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
        collaborators: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        })),
        createdAt: faker.datatype.number(),
        updatedAt: faker.datatype.number(),
    },
});

export const getGetPublicationUsernameNameZipMock = () => faker.random.word();

export const getGetPublicationUsernameNameRevisionsMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    revisions: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
        id: faker.random.word(),
        name: faker.random.word(),
        title: faker.random.word(),
        introduction: faker.helpers.randomize([faker.random.word(), undefined]),
        changelog: faker.helpers.randomize([faker.random.word(), undefined]),
        about: faker.helpers.randomize([faker.random.word(), undefined]),
        revision: faker.random.word(),
        pinned: faker.datatype.boolean(),
        draft: faker.datatype.boolean(),
        current: faker.datatype.boolean(),
        reviews: faker.datatype.number(),
        owner: {
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        },
        attachment: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
        collaborators: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        })),
        createdAt: faker.datatype.number(),
        updatedAt: faker.datatype.number(),
    })),
});

export const getGetPublicationUsernameNameTreePathMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    entry: faker.helpers.randomize([
        {
            type: faker.helpers.randomize(['file']),
            mimeType: faker.random.word(),
            filename: faker.random.word(),
            contents: faker.random.word(),
            updatedAt: faker.datatype.number(),
        },
        {
            type: faker.helpers.randomize(['directory']),
            entries: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                type: faker.helpers.randomize(['file', 'directory']),
                filename: faker.random.word(),
                updatedAt: faker.datatype.number(),
            })),
        },
    ]),
});

export const getGetPublicationUsernameNameDownloadPathMock = () => faker.random.word();

export const getGetPublicationUsernameNameSourcesMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    entries: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
        type: faker.helpers.randomize(['file']),
        mimeType: faker.random.word(),
        filename: faker.random.word(),
        contents: faker.random.word(),
        updatedAt: faker.datatype.number(),
    })),
});

export const getDeletePublicationUsernameNameAllMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
});

export const getDeletePublicationbyidIdMock = () => ({ status: faker.helpers.randomize(Object.values(SuccessStatus)) });

export const getPatchPublicationbyidIdMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    publication: {
        id: faker.random.word(),
        name: faker.random.word(),
        title: faker.random.word(),
        introduction: faker.helpers.randomize([faker.random.word(), undefined]),
        changelog: faker.helpers.randomize([faker.random.word(), undefined]),
        about: faker.helpers.randomize([faker.random.word(), undefined]),
        revision: faker.random.word(),
        pinned: faker.datatype.boolean(),
        draft: faker.datatype.boolean(),
        current: faker.datatype.boolean(),
        reviews: faker.datatype.number(),
        owner: {
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        },
        attachment: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
        collaborators: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        })),
        createdAt: faker.datatype.number(),
        updatedAt: faker.datatype.number(),
    },
});

export const getGetPublicationbyidIdMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    publication: {
        id: faker.random.word(),
        name: faker.random.word(),
        title: faker.random.word(),
        introduction: faker.helpers.randomize([faker.random.word(), undefined]),
        changelog: faker.helpers.randomize([faker.random.word(), undefined]),
        about: faker.helpers.randomize([faker.random.word(), undefined]),
        revision: faker.random.word(),
        pinned: faker.datatype.boolean(),
        draft: faker.datatype.boolean(),
        current: faker.datatype.boolean(),
        reviews: faker.datatype.number(),
        owner: {
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        },
        attachment: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
        collaborators: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        })),
        createdAt: faker.datatype.number(),
        updatedAt: faker.datatype.number(),
    },
});

export const getGetPublicationbyidIdZipMock = () => faker.random.word();

export const getPostPublicationbyidIdExportMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
});

export const getPostPublicationbyidIdReviseMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    publication: {
        id: faker.random.word(),
        name: faker.random.word(),
        title: faker.random.word(),
        introduction: faker.helpers.randomize([faker.random.word(), undefined]),
        changelog: faker.helpers.randomize([faker.random.word(), undefined]),
        about: faker.helpers.randomize([faker.random.word(), undefined]),
        revision: faker.random.word(),
        pinned: faker.datatype.boolean(),
        draft: faker.datatype.boolean(),
        current: faker.datatype.boolean(),
        reviews: faker.datatype.number(),
        owner: {
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        },
        attachment: faker.helpers.randomize([faker.datatype.boolean(), undefined]),
        collaborators: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            id: faker.random.word(),
            email: faker.random.word(),
            username: faker.random.word(),
            role: faker.helpers.randomize(Object.values(UserRole)),
            name: faker.helpers.randomize([faker.random.word(), undefined]),
            createdAt: faker.datatype.number(),
            profilePictureUrl: faker.helpers.randomize([faker.random.word(), undefined]),
            status: faker.helpers.randomize([faker.random.word(), undefined]),
            about: faker.helpers.randomize([faker.random.word(), undefined]),
        })),
        createdAt: faker.datatype.number(),
        updatedAt: faker.datatype.number(),
    },
});

export const getGetPublicationbyidIdTreePathMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    entry: faker.helpers.randomize([
        {
            type: faker.helpers.randomize(['file']),
            mimeType: faker.random.word(),
            filename: faker.random.word(),
            contents: faker.random.word(),
            updatedAt: faker.datatype.number(),
        },
        {
            type: faker.helpers.randomize(['directory']),
            entries: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                type: faker.helpers.randomize(['file', 'directory']),
                filename: faker.random.word(),
                updatedAt: faker.datatype.number(),
            })),
        },
    ]),
});

export const getGetPublicationbyidIdDownloadPathMock = () => faker.random.word();

export const getGetPublicationbyidIdSourcesMock = () => ({
    status: faker.helpers.randomize(Object.values(SuccessStatus)),
    entries: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
        type: faker.helpers.randomize(['file']),
        mimeType: faker.random.word(),
        filename: faker.random.word(),
        contents: faker.random.word(),
        updatedAt: faker.datatype.number(),
    })),
});

export const getPublicationsMSW = () => [
    rest.post('*/publication', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getPostPublicationMock()));
    }),
    rest.get('*/publication', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetPublicationMock()));
    }),
    rest.get('*/publication/:username', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetPublicationUsernameMock()));
    }),
    rest.delete('*/publication/:username/:name', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getDeletePublicationUsernameNameMock()));
    }),
    rest.patch('*/publication/:username/:name', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getPatchPublicationUsernameNameMock()));
    }),
    rest.get('*/publication/:username/:name', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetPublicationUsernameNameMock()));
    }),
    rest.post('*/publication/:username/:name/export', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getPostPublicationUsernameNameExportMock()),
        );
    }),
    rest.post('*/publication/:username/:name/revise', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getPostPublicationUsernameNameReviseMock()),
        );
    }),
    rest.get('*/publication/:username/:name/zip', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetPublicationUsernameNameZipMock()));
    }),
    rest.get('*/publication/:username/:name/revisions', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetPublicationUsernameNameRevisionsMock()),
        );
    }),
    rest.get('*/publication/:username/:name/tree/:path', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetPublicationUsernameNameTreePathMock()),
        );
    }),
    rest.get('*/publication/:username/:name/download/:path', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetPublicationUsernameNameDownloadPathMock()),
        );
    }),
    rest.get('*/publication/:username/:name/sources', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetPublicationUsernameNameSourcesMock()),
        );
    }),
    rest.delete('*/publication/:username/:name/all', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getDeletePublicationUsernameNameAllMock()),
        );
    }),
    rest.delete('*/publication-by-id/:id', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getDeletePublicationbyidIdMock()));
    }),
    rest.patch('*/publication-by-id/:id', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getPatchPublicationbyidIdMock()));
    }),
    rest.get('*/publication-by-id/:id', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetPublicationbyidIdMock()));
    }),
    rest.get('*/publication-by-id/:id/zip', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetPublicationbyidIdZipMock()));
    }),
    rest.post('*/publication-by-id/:id/export', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getPostPublicationbyidIdExportMock()));
    }),
    rest.post('*/publication-by-id/:id/revise', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getPostPublicationbyidIdReviseMock()));
    }),
    rest.get('*/publication-by-id/:id/tree/:path', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetPublicationbyidIdTreePathMock()));
    }),
    rest.get('*/publication-by-id/:id/download/:path', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetPublicationbyidIdDownloadPathMock()),
        );
    }),
    rest.get('*/publication-by-id/:id/sources', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetPublicationbyidIdSourcesMock()));
    }),
];
